@model AdminPortal._Features_.GetMeteringPointsQueryResultViewModel
<script>
    function onActivateBtnlicked() {
        showActivateMeteringPointModal(() => {
            const form = document.getElementById('activateMeteringPointForm');
            form.querySelectorAll('input[name="gsrn"], input[name="owner"], input[name="tin"]').forEach(e => e.remove());

            const ownerGuid = '@Model.OrganizationId';
            const tin = '@Model.Tin';

            document.querySelectorAll('.meteringpoint-checkbox:checked').forEach(cb => {
                const [gsrn, , activeContract, canBeUsedForIssuingCertificates] = cb.value.split(',');
                if (activeContract === "True" || canBeUsedForIssuingCertificates === "False") return;

                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'gsrn';
                input.value = gsrn;
                form.appendChild(input);
            });

            ['owner', 'tin'].forEach(name => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = name;
                input.value = name === 'owner' ? ownerGuid : tin;
                form.appendChild(input);
            });

            form.submit();
        });
    }

    function onDeactivateBtnlicked() {
        showDeactivateMeteringPointModal(() => {
            const form = document.getElementById('deactivateMeteringPointForm');
            form.querySelectorAll('input[name="contractId"], input[name="owner"], input[name="tin"]').forEach(e => e.remove());

            const ownerGuid = '@Model.OrganizationId';
            const tin = '@Model.Tin';

            document.querySelectorAll('.meteringpoint-checkbox:checked').forEach(cb => {
                const [, contractId] = cb.value.split(',');
                if (!contractId) return;

                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'contractIds';
                input.value = contractId;
                form.appendChild(input);
            });

            ['owner', 'tin'].forEach(name => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = name;
                input.value = name === 'owner' ? ownerGuid : tin;
                form.appendChild(input);
            });

            fetch(form.action, {
                method: 'PUT',
                body: new FormData(form),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            }).then(response => response.ok ? location.reload() : alert('Failed to update metering point.'));
        });
    }
</script>

<div class="container mt-4 mb-5">
    <div class="card shadow-sm">
        <div class="card-header bg-light border-bottom py-3">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="h5 mb-0 text-primary d-flex align-items-center">
                    <i class="bi bi-speedometer2 me-2"></i>Meteringpoints
                </h2>
            </div>
        </div>
        <div>
            <h2 style="margin-left:1rem">@Model.OrganizationName (@Model.Tin)</h2>
        </div>

        <div class="card-body p-4">
            <!-- Search and Filters Section -->
            <div class="mb-4 p-3 border rounded bg-light-subtle">
                <div class="row g-3 align-items-end">
                    <!-- Search Box -->
                    <div class="col-lg-6 col-md-12">
                        <label for="searchInput" class="form-label small fw-semibold text-muted">Global Search</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" id="searchInput" class="form-control"
                                   placeholder="Search by Organization, TIN, GSRN, Type..."
                                   aria-label="Search meteringpoints">
                            <button id="clearSearch" class="btn btn-outline-secondary" type="button" title="Clear search">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Column Filters -->
                    <div class="col-lg-3 col-md-6">
                        <label for="typeFilter" class="form-label small fw-semibold text-muted">Filter by Type</label>
                        <select id="typeFilter" class="form-select column-filter" data-column="2">
                            <option value="">All Types</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive">
                <table class="table table-hover table-striped table-bordered mb-0" id="meteringpointsTable">
                    <thead class="table-light">
                    <tr>
                        <th scope="col">
                            <input type="checkbox" id="selectAllCheckbox" title="Select all meteringpoints" />
                        </th>
                        <th scope="col">GSRN</th>
                        <th scope="col">Type</th>
                        <th scope="col">Address</th>
                        <th scope="col">Bidding zone</th>
                        <th scope="col">Grid area</th>
                        <th scope="col">Sub meter type</th>
                        <th scope="col">Technology</th>
                        <th scope="col">Capacity</th>
                        <th scope="col">Can be used for issuing?</th>
                        <th scope="col">Issuing certificates</th>

                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var point in Model.MeteringPoints)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" class="meteringpoint-checkbox" value="@point.GSRN,@point.ContractId,@point.ActiveContract,@point.CanBeUsedForIssuingCertificates" />                            </td>
                            <td class="fw-medium">@point.GSRN</td>
                            <td data-original-text="@point.MeterType"><span class="badge bg-info">@point.MeterType</span></td>
                            <td class="fw-medium">@point.Address</td>
                            <td class="fw-medium">@point.BiddingZone</td>
                            <td class="fw-medium">@point.GridArea</td>
                            <td class="fw-medium">@point.SubMeterType</td>
                            @if (point.MeterType == MeteringPointType.Consumption)
                            {
                                <td class="fw-medium">-</td>
                            }
                            else
                            {
                                <td class="fw-medium">@point.Technology</td>
                            }
                            <td class="fw-medium">@point.Capacity</td>
                            @if (point.CanBeUsedForIssuingCertificates)
                            {
                                <td class="fw-medium">Yes</td>
                            }
                            else
                            {
                                <td class="fw-medium">No</td>
                            }
                            @if (point.ActiveContract)
                            {
                                <td class="fw-medium">
                                    <span class="badge bg-success">ON</span>
                                </td>
                            }
                            else
                            {
                                <td class="fw-medium">
                                    <span class="badge bg-danger">OFF</span>
                                </td>
                            }

                        </tr>
                    }
                    </tbody>
                </table>
                <div class="row mt-3">
                    <div class="col-12 d-flex flex-wrap gap-2 justify-content-end">
                        <button id="deactivateBtn" class="btn btn-warning me-2" type="button" onclick="onDeactivateBtnlicked()" disabled>Deactivate</button>
                        <button id="activateBtn" class="btn btn-success" type="button" onclick="onActivateBtnlicked()" disabled>Activate</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<partial name="_ActivateMeteringPointForm" />
<partial name="_ActivateMeteringPointContractModal" />
<partial name="_DeactivateMeteringPointForm" />
<partial name="_DeactivateMeteringPointContractModal" />

<style>
    .card-header .h5 {
        font-weight: 500;
    }

    .table th {
        font-weight: 600;
        white-space: nowrap;
        vertical-align: middle;
    }

    .table td {
        vertical-align: middle;
    }

    .filter-highlight {
        background-color: #ffe082 !important;
        font-weight: 500;
        border-radius: 2px;
    }

    .sortable {
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .sortable:hover {
        background-color: #e9ecef;
    }
    .sortable .bi {
        font-size: 0.8em;
    }

    .form-label.small {
        font-size: 0.875em;
    }

    .bg-light-subtle {
        background-color: #f8f9fa !important;
    }

    .badge {
        padding: 0.4em 0.65em;
        font-size: 0.8em;
        font-weight: 500;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const clearButton = document.getElementById('clearSearch');
            const table = document.getElementById('meteringpointsTable');
            const tbody = table.querySelector('tbody');
            const columnFilters = document.querySelectorAll('.column-filter');
            let filterTimeout;

            // Store original content for badge cells
            Array.from(tbody.rows).forEach(row => {
                Array.from(row.cells).forEach((cell, index) => {
                    if (index === 2) { // Type column with badge
                        const badge = cell.querySelector('.badge');
                        if (badge) {
                            cell.dataset.originalText = badge.textContent.trim();
                            cell.dataset.originalBadgeHtml = cell.innerHTML;
                        } else {
                            cell.dataset.originalText = cell.textContent.trim();
                            cell.dataset.originalBadgeHtml = cell.innerHTML;
                        }
                    }
                });
            });

            // Select all functionality
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            const meteringpointCheckboxes = () => document.querySelectorAll('.meteringpoint-checkbox');

            selectAllCheckbox.addEventListener('change', function () {
                meteringpointCheckboxes().forEach(cb => {
                    cb.checked = selectAllCheckbox.checked;
                });
            });

            // Uncheck "Select All" if any individual checkbox is unchecked
            document.addEventListener('change', function (e) {
                if (e.target.classList.contains('meteringpoint-checkbox')) {
                    if (!e.target.checked) {
                        selectAllCheckbox.checked = false;
                    } else if ([...meteringpointCheckboxes()].every(cb => cb.checked)) {
                        selectAllCheckbox.checked = true;
                    }
                }
            });

            function updateActionButtons() {
                const anyChecked = [...meteringpointCheckboxes()].some(cb => cb.checked);
                document.getElementById('deactivateBtn').disabled = !anyChecked;
                document.getElementById('activateBtn').disabled = !anyChecked;
            }

            meteringpointCheckboxes().forEach(cb => {
                cb.addEventListener('change', updateActionButtons);
            });
            selectAllCheckbox.addEventListener('change', updateActionButtons);
            updateActionButtons();

            document.querySelectorAll('#meteringpointsTable tbody td:nth-child(3), #meteringpointsTable tbody td:nth-child(4)')
                .forEach(cell => {
                    cell.style.cursor = 'pointer';
                    cell.addEventListener('click', function() {
                        searchInput.value = this.textContent.trim();
                        applyFilters();
                    });
                });

            function initColumnFilters() {
                const columnIndicesToFilter = [2]; // Type column

                columnIndicesToFilter.forEach(colIndex => {
                    const filter = document.querySelector(`.column-filter[data-column="${colIndex}"]`);
                    if (!filter) return;

                    const uniqueValues = new Set();
                    Array.from(tbody.rows).forEach(row => {
                        const cell = row.cells[colIndex];
                        const value = cell.dataset.originalText ? cell.dataset.originalText.trim() : cell.textContent.trim();
                        if (value) {
                            uniqueValues.add(value);
                        }
                    });

                    while (filter.options.length > 1) {
                        filter.remove(1);
                    }

                    Array.from(uniqueValues).sort().forEach(value => {
                        const option = document.createElement('option');
                        option.value = value.toLowerCase();
                        option.textContent = value;
                        filter.appendChild(option);
                    });
                });
            }

            function debounce(func, delay) {
                return function(...args) {
                    clearTimeout(filterTimeout);
                    filterTimeout = setTimeout(() => {
                        func.apply(this, args);
                    }, delay);
                };
            }

            function highlightMatches(text, filter) {
                if (!filter || !text) return text;
                const escapedFilter = filter.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                const regex = new RegExp(`(${escapedFilter})`, 'gi');
                return text.replace(regex, '<span class="filter-highlight">$1</span>');
            }

            const applyFilters = debounce(function() {
                const globalFilter = searchInput.value.toLowerCase().trim();
                const columnFiltersState = Array.from(columnFilters).map(filter => ({
                    index: parseInt(filter.dataset.column),
                    value: filter.value.toLowerCase()
                }));

                Array.from(tbody.rows).forEach(row => {
                    const cells = row.cells;
                    let showRow = true;

                    // Apply column filters
                    columnFiltersState.forEach(filterState => {
                        if (filterState.value) {
                            const cell = cells[filterState.index];
                            const cellText = (cell.dataset.originalText || cell.textContent).trim().toLowerCase();
                            if (cellText !== filterState.value) {
                                showRow = false;
                            }
                        }
                    });

                    // Apply global filter
                    if (showRow && globalFilter) {
                        const rowText = Array.from(cells).map((cell, idx) => {
                            if (idx === 3) return cell.dataset.originalText || cell.textContent;
                            return cell.textContent;
                        }).join(' ').toLowerCase();

                        if (!rowText.includes(globalFilter)) {
                            showRow = false;
                        }
                    }

                    // Reset and apply highlighting
                    Array.from(cells).forEach((cell, index) => {
                        if (index === 0) return;
                        if (index === 2 && cell.dataset.originalBadgeHtml) {
                            cell.innerHTML = cell.dataset.originalBadgeHtml;
                        } else if (!cell.dataset.originalBadgeHtml) {
                            cell.innerHTML = cell.textContent;
                        }

                        if (globalFilter && showRow) {
                            if (index === 2) {
                                const badge = cell.querySelector('.badge');
                                if (badge) {
                                    const originalText = cell.dataset.originalText || badge.textContent;
                                    badge.innerHTML = highlightMatches(originalText, globalFilter);
                                }
                            } else {
                                cell.innerHTML = highlightMatches(cell.textContent, globalFilter);
                            }
                        }
                    });

                    row.style.display = showRow ? '' : 'none';
                });
            }, 300);

            searchInput.addEventListener('input', applyFilters);
            clearButton.addEventListener('click', () => {
                searchInput.value = '';
                columnFilters.forEach(filter => filter.value = '');
                Array.from(tbody.rows).forEach(row => {
                    Array.from(row.cells).forEach((cell, index) => {
                        if (index === 2 && cell.dataset.originalBadgeHtml) {
                            cell.innerHTML = cell.dataset.originalBadgeHtml;
                        } else if (!cell.dataset.originalBadgeHtml) {
                            cell.innerHTML = cell.textContent;
                        }
                    });
                    row.style.display = '';
                });
            });

            columnFilters.forEach(filter => filter.addEventListener('change', applyFilters));

            if (tbody.rows.length > 0) {
                initColumnFilters();
            }
        });
    </script>
}
