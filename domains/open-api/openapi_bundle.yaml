openapi: 3.0.2
info:
  version: 1.0.0
  title: energioprindelse.dk
  termsOfService: https://energioprindelse.dk/terms/
servers:
  - url: https://energioprindelse.dk
security:
  - JWT: []
tags:
  - name: Contracts
    description: Contracts are key in Energy Origin. When you have an active contract for at metering point Granular Certificates will be generated until the end of the contract. It applies to both production and consumption metering points. However, the production metering points must be either Wind or Solar – otherwise it is not possible to generate GCs. When a contract is inactive Granular Certificates will no longer be generated.
  - name: Wallet
    description: The Wallet is essential for Energy Origin since it keeps track of all the user’s Granular Certificates – both the ones generated from the user’s own metering points, but also the ones transferred from other users. In other words, the Wallet will hold all available certificates for the user. Moreover, it will show all transfers that may have been made to other users’ wallets as well.
paths:
  /api/certificates/contracts:
    get:
      tags:
        - Contracts
      summary: Returns all the user's contracts for issuing granular certificates
      operationId: getContracts
      parameters:
        - $ref: '#/components/parameters/version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contract'
    post:
      tags:
        - Contracts
      summary: Create a contract that activates granular certificate generation for a metering point
      operationId: createContract
      parameters:
        - $ref: '#/components/parameters/version'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContract'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateContract'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ValidationProblemDetails'
        '409':
          description: Conflict
  /api/certificates/contracts/{id}:
    put:
      tags:
        - Contracts
      summary: Edit the end date for contract
      operationId: updateContractEndDate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/version'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditContractEndDate'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EditContractEndDate'
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
        '404':
          description: Not Found
    get:
      tags:
        - Contracts
      summary: Returns contract based on the id
      operationId: GetContract
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/version'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
            text/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '404':
          description: Not Found
  /api/v1/certificates:
    get:
      tags:
        - Wallet
      summary: Gets all certificates in the wallet that are <b>available</b> for use.
      operationId: getCertificates
      parameters:
        - name: start
          in: query
          description: The start of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
        - name: end
          in: query
          description: The end of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns the aggregated claims.
          content:
            application/json:
              schema:
                properties:
                  GranularCertificateResultList:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/GranularCertificate'
        '401':
          description: If the user is not authenticated.
  /api/v1/claims:
    get:
      tags:
        - Wallet
      summary: Gets all claims in the wallet
      operationId: getClaims
      parameters:
        - name: start
          in: query
          description: The start of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
        - name: end
          in: query
          description: The end of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns all the indiviual claims.
          content:
            application/json:
              schema:
                properties:
                  ClaimResultList:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/Claim'
        '401':
          description: If the user is not authenticated.
  /api/v1/transfers:
    get:
      tags:
        - Wallet
      summary: Gets detailed list of all of the transfers that have been made to other wallets.
      operationId: getTransfers
      parameters:
        - name: start
          in: query
          description: The start of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
        - name: end
          in: query
          description: The end of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns the individual transferes within the filter.
          content:
            application/json:
              schema:
                properties:
                  TransferResultList:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/Transfer'
        '401':
          description: If the user is not authenticated.
  /api/v1/aggregate-certificates:
    get:
      tags:
        - Wallet
      summary: Returns aggregates certificates that are <b>available</b> to use, based on the specified time zone and time range.
      operationId: getAggregateCertificates
      parameters:
        - name: timeAggregate
          in: query
          description: The size of each bucket in the aggregation
          schema:
            $ref: '#/components/schemas/TimeAggregate'
        - name: timeZone
          in: query
          description: The time zone. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for a list of valid time zones.
          schema:
            type: string
        - name: start
          in: query
          description: The start of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
        - name: end
          in: query
          description: The end of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Filter the type of certificates to return.
          schema:
            $ref: '#/components/schemas/CertificateType'
      responses:
        '200':
          description: Returns the aggregated claims.
          content:
            application/json:
              schema:
                properties:
                  AggregatedCertificatesResultList:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/AggregatedCertificates'
        '400':
          description: If the time zone is invalid.
        '401':
          description: If the user is not authenticated.
  /api/v1/aggregate-claims:
    get:
      tags:
        - Wallet
      summary: Returns a list of aggregates claims for the authenticated user based on the specified time zone and time range.
      operationId: getAggregateClaims
      parameters:
        - name: timeAggregate
          in: query
          description: The size of each bucket in the aggregation
          schema:
            $ref: '#/components/schemas/TimeAggregate'
        - name: timeZone
          in: query
          description: The time zone. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for a list of valid time zones.
          schema:
            type: string
        - name: start
          in: query
          description: The start of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
        - name: end
          in: query
          description: The end of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns the aggregated claims.
          content:
            application/json:
              schema:
                properties:
                  AggregatedClaimsResultList:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/AggregatedClaims'
        '400':
          description: If the time zone is invalid.
        '401':
          description: If the user is not authenticated.
  /api/v1/aggregate-transfers:
    get:
      tags:
        - Wallet
      summary: Returns a list of aggregates transfers, for all certificates transferred to another wallet for the authenticated user based.
      operationId: getAggregateTransfers
      parameters:
        - name: timeAggregate
          in: query
          description: The size of each bucket in the aggregation
          schema:
            $ref: '#/components/schemas/TimeAggregate'
        - name: timeZone
          in: query
          description: The time zone. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for a list of valid time zones.
          schema:
            type: string
        - name: start
          in: query
          description: The start of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
        - name: end
          in: query
          description: The end of the time range in Unix time in seconds.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns the aggregated claims.
          content:
            application/json:
              schema:
                properties:
                  AggregatedTransfersResultList:
                    type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/AggregatedTransfers'
        '400':
          description: If the time zone is invalid.
        '401':
          description: If the user is not authenticated.
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    version:
      name: EO_API_VERSION
      in: header
      description: The requested API version
      required: true
      schema:
        type: string
        default: '20230101'
  schemas:
    Gsrn:
      type: string
      description: Global Service Relation Number (GSRN) for the metering point
    MeteringPointType:
      enum:
        - Production
        - Consumption
      type: Type of Metering Point
    Technology:
      type: object
      properties:
        fuelCode:
          type: string
        techCode:
          type: string
      additionalProperties: false
      description: Technology is following the AIB standard for tech and fuel codes
    Contract:
      type: object
      description: A contract is a binding agreement between a supplier and a metering point
      properties:
        id:
          type: string
          format: uuid
        gsrn:
          $ref: '#/components/schemas/Gsrn'
        startDate:
          type: integer
          description: Starting date for generation of certificates in Unix time seconds
          format: int64
        endDate:
          type: integer
          description: End date for generation of certificates in Unix time seconds. The value null indicates no end date
          format: int64
          nullable: true
        created:
          type: integer
          description: Creation date for the contract
          format: int64
        meteringPointType:
          $ref: '#/components/schemas/MeteringPointType'
        technology:
          $ref: '#/components/schemas/Technology'
      additionalProperties: false
    CreateContract:
      type: object
      properties:
        gsrn:
          $ref: '#/components/schemas/Gsrn'
        startDate:
          type: integer
          description: Starting date for generation of certificates in Unix time seconds
          format: int64
        endDate:
          type: integer
          description: End date for generation of certificates in Unix time seconds. Set to null for no end date
          format: int64
          nullable: true
      additionalProperties: false
    ValidationProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      additionalProperties: {}
    EditContractEndDate:
      type: object
      properties:
        endDate:
          type: integer
          description: End Date for generation of certificates in Unix time seconds. Set to null for no end date
          format: int64
          nullable: true
      additionalProperties: false
    FederatedStreamId:
      type: object
      properties:
        registry:
          type: string
        streamId:
          type: string
          format: uuid
      additionalProperties: false
    CertificateType:
      enum:
        - consumption
        - production
      type: string
      description: Type of certificate
    GranularCertificate:
      type: object
      properties:
        federatedStreamId:
          $ref: '#/components/schemas/FederatedStreamId'
        quantity:
          type: integer
          format: int32
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        gridArea:
          type: string
        certificateType:
          $ref: '#/components/schemas/CertificateType'
        attributes:
          type: object
          additionalProperties:
            type: string
      additionalProperties: false
    ClaimedCertificate:
      type: object
      properties:
        federatedStreamId:
          $ref: '#/components/schemas/FederatedStreamId'
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        gridArea:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: string
      additionalProperties: false
    Claim:
      type: object
      properties:
        claimId:
          type: string
          format: uuid
        quantity:
          type: integer
          format: int32
        productionCertificate:
          $ref: '#/components/schemas/ClaimedCertificate'
        consumptionCertificate:
          $ref: '#/components/schemas/ClaimedCertificate'
      additionalProperties: false
    Transfer:
      type: object
      properties:
        federatedStreamId:
          $ref: '#/components/schemas/FederatedStreamId'
        receiverId:
          type: string
        quantity:
          type: integer
          format: int64
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        gridArea:
          type: string
      additionalProperties: false
    TimeAggregate:
      enum:
        - actual
        - total
        - year
        - month
        - week
        - day
        - hour
        - quarterHour
      type: string
    AggregatedCertificates:
      type: object
      properties:
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/CertificateType'
      additionalProperties: false
    AggregatedClaims:
      type: object
      properties:
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
      additionalProperties: false
    AggregatedTransfers:
      type: object
      properties:
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
      additionalProperties: false
