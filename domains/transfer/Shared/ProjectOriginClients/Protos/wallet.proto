syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "common.proto";

package project_origin.wallet_system.v1;

// Anonymously functions, Externally accessible
service ReceiveSliceService {
    rpc ReceiveSlice(ReceiveRequest) returns (ReceiveResponse);
}

// Requires authorization with a Bearer token JWT, sub field identifies the owner
// Could be internal only, up to the host to decide
service WalletService {
    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse); // Only allowed one per user for now, later multiple wallets per user will be allowed.
    rpc CreateWalletDepositEndpoint(CreateWalletDepositEndpointRequest) returns (CreateWalletDepositEndpointResponse);
    rpc CreateReceiverDepositEndpoint(CreateReceiverDepositEndpointRequest) returns (CreateReceiverDepositEndpointResponse);

    // Certificate functions, slices abstracted away and solved by wallet
    rpc QueryGranularCertificates(QueryRequest) returns (QueryResponse);
    rpc TransferCertificate(TransferRequest) returns (TransferResponse);
    rpc ClaimCertificates(ClaimRequest) returns (ClaimResponse);
    rpc QueryClaims(ClaimQueryRequest) returns (ClaimQueryResponse);
}

message CreateWalletDepositEndpointRequest {}

message CreateWalletDepositEndpointResponse {
    WalletDepositEndpoint wallet_deposit_endpoint = 1;
}

message CreateReceiverDepositEndpointRequest {
    WalletDepositEndpoint wallet_deposit_endpoint = 1;
    string reference = 2;
}

message CreateReceiverDepositEndpointResponse {
    project_origin.common.v1.Uuid receiver_id = 1;
}

message CreateWalletRequest {
    bytes private_key = 1;
}

message CreateWalletResponse { }

message ReceiveRequest {
    bytes wallet_deposit_endpoint_public_key = 1;
    uint32 wallet_deposit_endpoint_position = 2;
    project_origin.common.v1.FederatedStreamId certificate_id = 3;
    uint32 quantity = 4;
    bytes random_r = 5;
}

message ReceiveResponse {} // not yet sure what to return


message WalletDepositEndpoint {
    int32 version = 1; // The version of the Wallet protobuf API.
    string endpoint = 2; // The url endpoint of the gRPC endpoint at which the wallet is hosted.
    bytes public_key = 3; // The public key used to generate sub-public-keys for each slice.
}

message QueryRequest {
    // Later filters will be added.
}

message QueryResponse {
    repeated GranularCertificate granular_certificates = 1;
}

message TransferRequest {
    project_origin.common.v1.FederatedStreamId certificate_id = 1; // The certificate to transfer from
    uint32 quantity = 2; // The quantity, either the total or a part of it, will be sliced implicitly by the wallet
    project_origin.common.v1.Uuid receiver_id = 3;
}

message TransferResponse {} // not yet sure what to return

message ClaimRequest {
    project_origin.common.v1.FederatedStreamId consumption_certificate_id = 1;
    project_origin.common.v1.FederatedStreamId production_certificate_id = 2;
    uint32 quantity = 3;
}

message ClaimResponse {
    project_origin.common.v1.Uuid claim_id = 1;
}

message ClaimQueryRequest {
    Filter filter = 1;
}

message Filter {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
}

message ClaimQueryResponse {
    repeated Claim claims = 1;
}

message Claim {
    project_origin.common.v1.Uuid claim_id = 1;
    uint32 quantity = 2;
    ClaimCertificateInfo consumption_certificate = 3;
    ClaimCertificateInfo production_certificate = 4;

    message ClaimCertificateInfo {
        project_origin.common.v1.FederatedStreamId federated_id = 1;
        google.protobuf.Timestamp start = 2;
        google.protobuf.Timestamp end = 3;
        string grid_area = 4;
        repeated Attribute attributes = 5;
    }
}

message GranularCertificate {
    project_origin.common.v1.FederatedStreamId federated_id = 1;
    GranularCertificateType type = 2;
    uint32 quantity = 3;
    string grid_area = 4;
    google.protobuf.Timestamp start = 5;
    google.protobuf.Timestamp end = 6;
    repeated Attribute attributes = 7;
}

message Attribute {
    string key = 1;
    string value = 2;
}

enum GranularCertificateType {
    INVALID = 0;
    CONSUMPTION = 1;
    PRODUCTION = 2;
}
