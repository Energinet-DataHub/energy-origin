name: Scans docker container in ghcr.io
description: This action scans an image in ghcr.io with keyless signing for SBOM and vulnerability reports.

inputs:
  image-name:
    description: The full image name excluding ghcr.io/<my_container>
    required: true
  image-tag:
    description: The image tag
    required: true
  upload-sarif:
    description: Determines if the sarif result is uploaded
    required: true
  grype-category:
    description: The grype category name
    required: false
    default: grype

runs:
  using: "composite"
  steps:
    - name: Resolve container image name
      shell: bash
      run: |
        owner=$(echo "${{ github.repository }}" | cut -d'/' -f1)
        echo "LOWERCASED=ghcr.io/$owner/${{ inputs.image-name }}" | tr '[:upper:]' '[:lower:]' >> $GITHUB_ENV

    - name: Log in to Container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Install Security Tools
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        curl -sSfL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
        chmod +x cosign
        sudo mv cosign /usr/local/bin

        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Get Image Digest
      shell: bash
      run: |
        # Get image digest instead of using tag directly
        digest=$(docker image inspect ${{ env.LOWERCASED }}:${{ inputs.image-tag }} --format '{{.RepoDigests}}' | grep -Eo 'sha256:[a-f0-9]+')
        echo "IMAGE_DIGEST=${{ env.LOWERCASED }}@$digest" >> $GITHUB_ENV

    - name: Generate and Attest SBOM (Keyless)
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        # Use digest instead of tag
        syft attest ${{ env.IMAGE_DIGEST }} \
          --output spdx-json \
          | cosign attest --yes --type spdxjson \
          --predicate - ${{ env.IMAGE_DIGEST }}

        # Capture Rekor UUID
        rekor_uuid=$(cosign verify-attestation ${{ env.IMAGE_DIGEST }} \
          --type spdxjson | jq -r '.[].Bundle.Payload.logIndex')
        echo "REKOR_UUID=$rekor_uuid" >> $GITHUB_ENV

    - name: Scan with Grype using Attested SBOM
      shell: bash
      run: |
        # Extract SBOM from attestation
        cosign verify-attestation ${{ env.IMAGE_DIGEST }} \
          --type spdxjson \
          | jq -r '.[].Bundle.Payload.body' | base64 -d | jq -r '.dsseEnvelope.payload' | base64 -d | jq .predicate \
          | grype -o sarif --file results.sarif

        # Store SARIF digest
        sarif_digest=$(sha256sum results.sarif | awk '{print $1}')
        echo "SARIF_DIGEST=$sarif_digest" >> $GITHUB_ENV

    - name: Attest SARIF Report (Keyless)
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        # Create provenance statement
        cat <<EOF > provenance.json
        {
          "image": "${{ env.IMAGE_DIGEST }}",
          "sbomRekorUUID": "${{ env.REKOR_UUID }}",
          "scannedAt": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        }
        EOF

        # Attest SARIF with provenance
        cosign attest-blob --yes \
          --type application/sarif+json \
          --predicate provenance.json \
          results.sarif

        # Get SARIF attestation reference
        sarif_ref=$(cosign triangulate $(sha256sum results.sarif | awk '{print $1}'))
        echo "SARIF_ATTESTATION_REF=$sarif_ref" >> $GITHUB_ENV

    - name: Upload SARIF to GitHub Security
      if: ${{ inputs.upload-sarif == 'true' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
        category: ${{ inputs.grype-category }}

    - name: Generate Verification Summary
      shell: bash
      run: |
        cat <<EOF >> $GITHUB_STEP_SUMMARY
        ## üîê Keyless Security Verification

        ### SBOM Attestation
        - **Image**: ${{ env.IMAGE_DIGEST }}
        - **Rekor Entry**: [View in Transparency Log](https://search.sigstore.dev/?logIndex=${{ env.REKOR_UUID }})

        ### Vulnerability Report
        - **SARIF Digest**: \`${{ env.SARIF_DIGEST }}\`
        - **Attestation Reference**: \`${{ env.SARIF_ATTESTATION_REF }}\`

        ### Verification Commands
        Verify SBOM attestation:
        \`\`\`bash
        cosign verify-attestation \\
          --type spdxjson \\
          ${{ env.IMAGE_DIGEST }}
        \`\`\`

        Verify SARIF attestation:
        \`\`\`bash
        cosign verify-attestation \\
          --type application/sarif+json \\
          ${{ env.SARIF_ATTESTATION_REF }}
        \`\`\`
        EOF
