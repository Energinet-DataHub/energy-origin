name: 'attest-sign'
description: 'Generate SBOM (Syft), scan (Grype), attest and sign docker image'
branding:
  icon: 'lock'
  color: 'green'

inputs:
  image_ref:
    description: |
      'form <image>@<digest>'
      'e.g. "ghcr.io/org/image@sha256:abcdef..."'
    required: true
  sbom:
    description: 'Existing SBOM in CycloneDX format, or will be generated'
    default: 'auto-generate-for-me-please.json'

outputs:
  sbom:
    description: 'SBOM file path'
    value: ${{ steps.set-outputs.outputs.SBOM }}

runs:
  using: 'composite'
  steps:
    - name: Validate image ref
      shell: bash
      env:
        IMAGE_REF: ${{ inputs.image_ref }}
      run: |
        if [[ "${IMAGE_REF}" != *@sha256:* ]]; then
          echo "Image must be in the form of <image>@<digest>"
          exit 1
        fi

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Check SBOM input
      shell: bash
      env:
        SBOM: ${{ inputs.sbom }}
      run: |
        if [ -z "${SBOM}" ]; then
          echo "SBOM input is empty. Please provide a valid SBOM."
          exit 1
        else
          echo "SBOM input: ${SBOM}"
        fi

    - name: Setup ORAS
      uses: oras-project/setup-oras@v1

    - name: Generate SBOM
      if: ${{ inputs.sbom == 'auto-generate-for-me-please.json' }}
      uses: anchore/sbom-action@v0
      with:
        image: ${{ inputs.image_ref }}
        output-file: ${{ inputs.sbom }}
        upload-artifact: false

    - name: Scan SBOM with Grype
      uses: anchore/scan-action@v6
      with:
        sbom: ${{ inputs.sbom }}
        output-format: json
        output-file: auto-grype-report.json
        fail-build: false

    - name: Sign and attest image
      shell: bash
      env:
        IMAGE_REF: ${{ inputs.image_ref }}
        SBOM: ${{ inputs.sbom }}
      run: |
        cosign sign --yes "${IMAGE_REF}"
        cosign attest --yes \
          --predicate "${SBOM}" \
          --type cyclonedx \
          "${IMAGE_REF}"
        cosign attest --yes \
          --predicate "auto-grype-report.json" \
          --type vuln \
          "${IMAGE_REF}"

    - name: Set outputs
      id: set-outputs
      shell: bash
      env:
        SBOM: ${{ inputs.sbom }}
      run: echo "SBOM=${SBOM}" >> $GITHUB_OUTPUT

    - name: Derive a short digest id
      id: digest
      shell: bash
      env:
        IMAGE_REF: ${{ inputs.image_ref }}
      run: |
        # grab everything after the '@', keep first 12 chars, remove non-alnum just in case
        DIGEST_ID=$(echo "${IMAGE_REF#*@}" | cut -c1-12 | tr -cd '[:alnum:]')
        echo "id=$DIGEST_ID" >> "$GITHUB_OUTPUT"

    # Upload SBOM
    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ steps.digest.outputs.id }}
        path: ${{ inputs.sbom }}

    # Upload Grype report
    - name: Upload Grype report artifact
      uses: actions/upload-artifact@v4
      with:
        name: grype-${{ steps.digest.outputs.id }}
        path: auto-grype-report.json
