name: Dotnet - Build
description: Build a dotnet project

inputs:
  solution:
    description: Is the path to a solution file.
    required: true
  project:
    description: Is the path to a project file.
    required: true
  configuration:
    description: Is the path to a configuration file.
    required: true
  dry-run:
    description: Perform all actions but without pushing the image
    required: false
    default: "false"
  sdk-version:
    description: Is a complete sdk version in format x.y.zzz
    required: false
    default: ""
  runtime-version:
    description: Is a complete runtime version in format x.y.z
    required: false
    default: ""
  strict-verification:
    description: "Fail the workflow if non-compliant packages are found"
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Load - global.json
      shell: bash
      run: |
        DIRECTORY=$(dirname '${{ inputs.solution }}')
        test -f "$DIRECTORY/global.json" || exit 0
        echo "DIRECTORY=$DIRECTORY" | tee -a $GITHUB_ENV
        echo "SDK=$(jq -rc '.sdk.version' "$DIRECTORY/global.json")" | tee -a $GITHUB_ENV
        echo "RUNTIME=$(jq -rc '.runtime.version' "$DIRECTORY/global.json")" | tee -a $GITHUB_ENV

    - name: Overwrite - if given optional input
      shell: bash
      run: |
        if [ ! -z "${{ inputs.sdk-version }}" ]; then
          echo "SDK=${{ inputs.sdk-version }}" | tee -a $GITHUB_ENV
        fi
        if [ ! -z "${{ inputs.runtime-version }}" ]; then
          echo "RUNTIME=${{ inputs.runtime-version }}" | tee -a $GITHUB_ENV
        fi

    - name: Fail - if versions are not present
      shell: bash
      run: |
        set +e
        ! test -z "${{ env.SDK }}"
        ! test -z "${{ env.RUNTIME }}"

    - name: Fetch Dockerfile
      shell: bash
      run: wget https://raw.githubusercontent.com/Energinet-DataHub/acorn-actions/main/Dockerfile.simplified -O Dockerfile

    - name: Resolve image version
      uses: Energinet-DataHub/acorn-actions/actions/docker-image-version@v3

    - name: Resolve image name
      shell: bash
      run: echo "name=$(yq '.name' '${{ inputs.configuration }}')" | tee -a $GITHUB_ENV

    - name: Build image
      uses: Energinet-Datahub/acorn-actions/actions/docker-build-and-push@v3
      with:
        dockerfile: Dockerfile
        image-name: ${{ env.name }}
        image-tag: ${{ env.version }}
        docker-context: .
        dry-run: ${{ inputs.dry-run }}
        build-args: |
          PROJECT=${{ inputs.project }}
          SDK_VERSION=${{ env.SDK }}
          RUNTIME_VERSION=${{ env.RUNTIME }}

    - name: Install Syft
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        syft version

    - name: Install dotnet-project-licenses tool
      shell: bash
      run: |
        dotnet tool install --global dotnet-project-licenses

    - name: Resolve image name and scan dependencies
      shell: bash
      run: |
        BASE_NAME=$(yq '.name' '${{ inputs.configuration }}')

        FULL_IMAGE_NAME=$(echo "ghcr.io/${{ github.repository_owner }}/${BASE_NAME}" | tr '[:upper:]' '[:lower:]')

        echo "name=${BASE_NAME}" >> $GITHUB_ENV
        echo "full_image_name=${FULL_IMAGE_NAME}" >> $GITHUB_ENV

        echo "Image name: ${BASE_NAME}"
        echo "Full image name: ${FULL_IMAGE_NAME}"
        echo "Version/Tag: ${{ env.version }}"
        echo "Full reference: ${FULL_IMAGE_NAME}:${{ env.version }}"

        echo "Scanning image ${FULL_IMAGE_NAME}:${{ env.version }} for .NET dependencies..."

        CONTAINER_ID=$(docker create ${FULL_IMAGE_NAME}:${{ env.version }})

        mkdir -p app_files

        docker cp $CONTAINER_ID:/app app_files/

        docker rm $CONTAINER_ID

        syft dir:app_files -o json > app_sbom.json

        echo "Extracting direct dependencies from solution..."
        cd $(dirname '${{ inputs.solution }}')
        dotnet restore

        echo "# Direct Dependencies" > ../../direct_dependencies.txt
        echo "Package Name | Version | Project File" >> ../../direct_dependencies.txt
        echo "-------------|---------|-------------" >> ../../direct_dependencies.txt

        find . -name "*.csproj" | while read -r csproj; do
          PROJECT_NAME=$(basename "$csproj" .csproj)
          echo "Analyzing project: $PROJECT_NAME"

          dotnet project-licenses -i "$csproj" -j > project_deps.json

          jq -r '.Packages[] | "\(.PackageName)|\(.PackageVersion)|\(.LicenseType)"' project_deps.json | while IFS='|' read -r name version license; do
            echo "$name | $version | $PROJECT_NAME" >> ../../direct_dependencies.txt
          done
        done

        cd ../../

        touch non-compliant-packages.txt

        echo "Checking for non-compliant direct dependencies..."

        grep -v "^#\|^-" direct_dependencies.txt | cut -d '|' -f 1 | tr -d ' ' > direct_dep_names.txt

        jq -r '.artifacts[] | select(.version != null) | "\(.name)|\(.version)|\(.type)"' app_sbom.json | while IFS='|' read -r name version type; do
          # Skip if version is empty
          if [[ -z "$version" || "$version" == "null" ]]; then
            continue
          fi

          if grep -q "^$name$" direct_dep_names.txt; then
            # Find which project this dependency is defined in
            PROJECT_INFO=$(grep -F "$name |" direct_dependencies.txt | head -1 | cut -d '|' -f 3)

            if [[ "$version" =~ ^0\. || "$version" =~ ^v0\. ]]; then
              echo "$name ($type): Version $version is below 1.0.0 - Defined in: $PROJECT_INFO" >> non-compliant-packages.txt
            fi

            if [[ "$version" == *-* ]]; then
              echo "$name ($type): Version $version contains a dash - Defined in: $PROJECT_INFO" >> non-compliant-packages.txt
            fi
          fi
        done

        # Create a summary of direct vs. transitive dependencies
        echo "# Dependency Summary" > dependency_summary.txt
        TOTAL_DEPS=$(jq '.artifacts | length' app_sbom.json)
        DIRECT_DEPS=$(wc -l < direct_dep_names.txt)
        TRANSITIVE_DEPS=$((TOTAL_DEPS - DIRECT_DEPS))

        echo "Total dependencies: $TOTAL_DEPS" >> dependency_summary.txt
        echo "Direct dependencies: $DIRECT_DEPS" >> dependency_summary.txt
        echo "Transitive dependencies: $TRANSITIVE_DEPS" >> dependency_summary.txt
        echo "" >> dependency_summary.txt

        # Add the direct dependencies list
        cat direct_dependencies.txt >> dependency_summary.txt

        echo "Dependency summary:"
        cat dependency_summary.txt

        if [[ -s non-compliant-packages.txt ]]; then
          NON_COMPLIANT_COUNT=$(sort -u non-compliant-packages.txt | wc -l | tr -d ' ')

          if [[ "${{ inputs.strict-verification }}" == "true" ]]; then
            echo "::error::Found $NON_COMPLIANT_COUNT non-compliant direct dependencies!"
            echo "::group::Non-compliant direct dependencies"
            sort -u non-compliant-packages.txt
            echo "::endgroup::"
            echo "non_compliant_count=${NON_COMPLIANT_COUNT}" >> $GITHUB_ENV
            echo "has_non_compliant=true" >> $GITHUB_ENV
            exit 1
          else
            echo "::warning::Found $NON_COMPLIANT_COUNT non-compliant direct dependencies!"
            echo "::group::Non-compliant direct dependencies"
            sort -u non-compliant-packages.txt
            echo "::endgroup::"
            echo "non_compliant_count=${NON_COMPLIANT_COUNT}" >> $GITHUB_ENV
            echo "has_non_compliant=true" >> $GITHUB_ENV
          fi
        else
          echo "All direct dependencies are compliant!"
          echo "non_compliant_count=0" >> $GITHUB_ENV
          echo "has_non_compliant=false" >> $GITHUB_ENV
        fi

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-sbom-${{ env.name }}-${{ env.version }}
        path: app_sbom.json
        compression-level: 0

    - name: Upload non-compliant packages list
      if: ${{ env.has_non_compliant == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: non-compliant-packages-${{ env.name }}-${{ env.version }}
        path: non-compliant-packages.txt
        compression-level: 0

    - name: Scan image
      uses: Energinet-DataHub/acorn-actions/actions/docker-scan@v3
      with:
        image-name: ${{ env.name }}
        image-tag: ${{ env.version }}
        upload-sarif: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
