name: Dotnet Validate Domain

description: Lints, tests, builds a domain.

inputs:
  solution-file-folder:
    description: The folder of the project and tests to build from
    required: true

  dotnet-version:
    description: The version of dotnet to use
    default: 7.0.x
    required: true

runs:
  using: composite

  steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Print dotnet information
      shell: bash
      working-directory: ${{ inputs.solution-file-folder }}
      run: dotnet --info

    - name: Print dotnet version
      shell: bash
      working-directory: ${{ inputs.solution-file-folder }}
      run: dotnet --version

    - name: Ensure solution or project exists
      shell: bash
      working-directory: ${{ inputs.solution-file-folder }}
      run: |
        compgen -G "*.sln" >/dev/null && exit 0
        compgen -G "*.csproj" >/dev/null && exit 0

        dotnet new sln
        find . -name "*.csproj" -exec dotnet sln add {} \;

        dotnet sln list | grep csproj >/dev/null || { printf '::error::No solution or projects found\n'; exit 1; }

    - name: Restore
      shell: bash
      working-directory: ${{ inputs.solution-file-folder }}
      run: dotnet restore

    - name: Lint
      shell: bash
      working-directory: ${{ inputs.solution-file-folder }}
      run: dotnet format --verify-no-changes -v diag

    - name: Test
      shell: bash
      working-directory: ${{ inputs.solution-file-folder }}
      run: dotnet test --no-restore --verbosity normal -warnaserror

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: csharp

    - name: CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:csharp"

    - name: Build
      shell: bash
      working-directory: ${{ inputs.solution-file-folder }}
      run: dotnet build --no-restore --configuration Release

    - name: Migration
      shell: bash
      working-directory: ${{ inputs.solution-file-folder }}
      run: |
        for service in $(find . -name "*.csproj"); do
          dotnet list "$service" package --format=json | grep 'Microsoft.EntityFrameworkCore"' >/dev/null || continue
          name=$(basename "$service" .csproj)
          echo Generating $name
          dotnet tool list -g | grep dotnet-ef >/dev/null || dotnet tool install --global dotnet-ef >/dev/null
          dotnet ef migrations script -i  --no-build --project "$service" -o "/tmp/${name}.sql"
        done

        for tmp in $(find /tmp/ -maxdepth 1 -name "*.sql"); do
          echo Checking $(basename "$tmp")
          original=../migrations/$(basename "$tmp")
          cat < "$tmp" | sed '/INSERT INTO "__EFMigrationsHistory"/,/);$/d' > /tmp/a
          cat < "$original" | sed '/INSERT INTO "__EFMigrationsHistory"/,/);$/d' > /tmp/b
          diff -q /tmp/a /tmp/b >/dev/null || { echo "Unexpected difference:"; diff /tmp/a /tmp/b; exit 1; }
        done
