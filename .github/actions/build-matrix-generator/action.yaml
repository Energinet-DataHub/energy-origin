name: Build Matrix Generator
description: Generate build matrix based on changed project folders

outputs:
  matrix:
    description: "JSON matrix of projects that need to be built"
    value: ${{ steps.set-matrix.outputs.matrix }}

runs:
  using: composite
  steps:
    - name: Find changes in buildable projects
      id: find-changes
      uses: ./.github/actions/find-diff-action
      with:
        paths: |
          domains/*/API/**/*.csproj
          domains/*/API/**/configuration.yaml
          domains/*/Proxy/**/*.csproj
          domains/*/Proxy/**/configuration.yaml
          domains/*/Worker/**/*.csproj
          domains/*/Worker/**/configuration.yaml
          domains/*/Web/**/*.csproj
          domains/*/Web/**/configuration.yaml
          domains/*/Dockerfile
          domains/*/configuration.yaml
          domains/*/*.sln

    - name: Generate build matrix
      id: set-matrix
      shell: bash
      run: |
        CHANGES="${{ steps.find-changes.outputs.list }}"

        if [ "${{ steps.find-changes.outputs.matches }}" != "true" ]; then
          echo "No changes detected in any buildable projects"
          matrix_json="[]"
        else
          echo "Changes detected:"
          echo "$CHANGES"

          matrix_entries=()

          while IFS= read -r -d '' csproj; do
            if [[ "$csproj" =~ /Tests/ ]] || [[ "$csproj" =~ /Shared/ ]] || [[ "$csproj" =~ Test\.csproj$ ]]; then
              continue
            fi

            project_dir=$(dirname "$csproj")
            domain_dir=$(echo "$project_dir" | sed 's|/.*/.*$||')
            project_name=$(basename "$project_dir")

            config_file=""
            if [ -f "$project_dir/configuration.yaml" ]; then
              config_file="$project_dir/configuration.yaml"
            elif [ -f "$(dirname "$project_dir")/configuration.yaml" ]; then
              config_file="$(dirname "$project_dir")/configuration.yaml"
            fi

            if [ -n "$config_file" ]; then
              if echo "$CHANGES" | grep -q "$project_dir\|$config_file"; then
                echo "Changes detected in $project_name ($project_dir)"

                solution_file=""
                if [ -f "$domain_dir/$(basename "$domain_dir").sln" ]; then
                  solution_file="$domain_dir/$(basename "$domain_dir").sln"
                elif [ -f "$domain_dir/$(basename "$project_dir").sln" ]; then
                  solution_file="$domain_dir/$(basename "$project_dir").sln"
                fi

                matrix_entry="{\"project-name\":\"$project_name\",\"build-type\":\"dotnet\",\"solution\":\"$solution_file\",\"project\":\"$csproj\",\"configuration\":\"$config_file\"}"
                matrix_entries+=("$matrix_entry")
              fi
            fi
          done < <(find domains -name "*.csproj" -print0)

          while IFS= read -r -d '' dockerfile; do
            project_dir=$(dirname "$dockerfile")
            project_name=$(basename "$project_dir")

            config_file=""
            if [ -f "$project_dir/configuration.yaml" ]; then
              config_file="$project_dir/configuration.yaml"
            fi

            if [ -n "$config_file" ]; then
              if echo "$CHANGES" | grep -q "$project_dir\|$dockerfile"; then
                echo "Changes detected in $project_name ($project_dir) - Docker project"

                matrix_entry="{\"project-name\":\"$project_name\",\"build-type\":\"docker\",\"configuration\":\"$config_file\",\"dockerfile\":\"$dockerfile\",\"docker-context\":\"$project_dir\"}"
                matrix_entries+=("$matrix_entry")
              fi
            fi
          done < <(find domains -name "Dockerfile" -print0)

          if [ ${#matrix_entries[@]} -eq 0 ]; then
            echo "No projects with changes detected"
            matrix_json="[]"
          else
            matrix_json="[$(IFS=','; echo "${matrix_entries[*]}")]"
          fi
        fi

        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
        echo "Generated matrix: $matrix_json"
