name: Build Subsystems

on:
  workflow_call:
    inputs:
      dry-run:
        description: "An indication of whether to commit/publish results"
        required: true
        type: string
      is-dependabot:
        description: "An indication of a dependabot pull request"
        required: true
        type: string

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      subsystems: ${{ env.subsystems }}
    steps:
      - uses: actions/checkout@v4

      - name: Build subsystems matrix
        shell: bash
        run: |
          for subsystem in $(find domains/ -mindepth 1 -maxdepth 1 -type d | egrep -v '/redoc$'); do
            [ -f "$subsystem/global.json" ] || cp "$subsystem/../../global.json" "$subsystem/global.json"
            settings=$(jq -srec '.[0] | .path=$path' --arg path "$subsystem" "$subsystem/global.json")
            sdk=$(printf '%s' "$settings" | jq -rce '.sdk.version')
            runtime=$(printf '%s' "$settings" | jq -rce '.runtime.version')
            csprojects=$(find "$subsystem" -mindepth 3 -maxdepth 3 -name "*.csproj" -exec dirname {} \; | egrep -v '[^\/]*/[^\/]*/Shared/[^\/]*' | egrep -v 'Tests$')
            projects=$(while read project; do printf '{"path":"%s","configuration":"%s","sdkVersion":"%s","runtimeVersion":"%s"}' "$project" "$(dirname $project)/configuration.yaml" "$sdk" "$runtime"; done <<< $csprojects | jq -sc '.')
            printf '{"projects":%s}\n' "$projects"
          done | jq -sc > /tmp/json
          echo "subsystems=$(jq '.[].projects[]' /tmp/json | jq -scr '. | unique')" >> "$GITHUB_ENV"

  test-subsystems:
    name: Test subsystems
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.setup.outputs.subsystems) }}
    steps:
      - uses: actions/checkout@v4

      - name: Resolve
        shell: bash
        env:
          PROJECT: ${{ matrix.build.path }}
          CONFIGURATION: ${{ matrix.build.configuration }}
        run: |
          projects=$(dirname "$PROJECT")
          domain=$(dirname "$projects")
          name=$(yq '.name' "$CONFIGURATION")
          service=${PROJECT#"$domain"}
          path=$(find "$PROJECT" -name "*.csproj" | head -n1)
          paths=$(for item in $(echo "$projects/"* "$projects"/../Shared); do test -d "$item" && find "$item" -name "*.csproj" || true; done)
          migration="$domain/migrations/$(basename "$PROJECT").sql"
          if [ ! -f "$migration" ]; then
            migration=""
          fi

          EOF=$(head -c 20 /dev/random | md5sum | head -c 32)
          {
            printf "paths<<%s\n" "$EOF"
            printf "%s\n" "$paths"
            printf "%s\n" "$EOF"
            echo "migration=${migration}"
            echo "service=${service}"
            echo "domain=${domain}"
            echo "name=${name}"
            echo "path=${path}"
            echo "version=abcdefg"
          } >> $GITHUB_ENV

      - name: Validate project
        uses: Energinet-DataHub/acorn-actions/actions/dotnet-validate@v4
        with:
          dotnet-version: ${{ matrix.build.sdkVersion }}
          pin-version: true
          paths: ${{ env.paths }}
          sql-file: ${{ env.migration }}

  build-subsystems:
    name: Build Subsystems
    needs: setup
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-subsystems.outputs.subsystems) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Create dynamic solution
        id: create-sln
        shell: bash
        run: |
          SUBSYSTEM="${{ matrix.subsystem }}"
          SOLUTION_NAME="$(tr '[:lower:]' '[:upper:]' <<< ${SUBSYSTEM:0:1})${SUBSYSTEM:1}"

          rm -f "$SOLUTION_NAME.sln"
          dotnet new sln -n "$SOLUTION_NAME"

          find "domains/$SUBSYSTEM" -type f -name '*.csproj' | while read project; do
            dotnet sln "$SOLUTION_NAME.sln" add "$project"
          done

          echo "SOLUTION_NAME=$SOLUTION_NAME" >> $GITHUB_ENV

      - name: Build Docker image
        uses: ./.github/actions/dotnet-build
        with:
          solution: ${{ env.SOLUTION_NAME }}.sln
          project: ${{ matrix.projectPath }}
          configuration: ${{ matrix.configPath }}
          dry-run: ${{ inputs.dry-run }}
          sdk-version: ${{ matrix.sdkVersion }}
          runtime-version: ${{ matrix.runtimeVersion }}

  update:
    runs-on: ubuntu-latest
    name: Update environment
    needs:
      - test-subsystems
      - build-subsystems
    concurrency: commits-base-environment
    if: ${{ inputs.is-dependabot == 'false' }}

    steps:
      - uses: actions/checkout@v4

      - name: Update environment
        uses: Energinet-DataHub/acorn-actions/actions/update-base-environment@v4
        with:
          configurations: |
            domains/admin-portal/AdminPortal.Web/configuration.yaml
            domains/authorization/Authorization.API/configuration.yaml
            domains/authorization/Proxy/configuration.yaml
            domains/certificates/Query.API/configuration.yaml
            domains/measurements/Measurements.API/configuration.yaml
            domains/oidc-mock/API/configuration.yaml
            domains/transfer/Transfer.API/configuration.yaml
            domains/transfer/ClaimAutomation/configuration.yaml
            domains/transfer/TransferAgreementAutomation/configuration.yaml
            domains/redoc/configuration.yaml
          dry_run: ${{ inputs.dry-run }}
          github-app-id: ${{ vars.ACORN_GHA_APP_ID }}
          github-app-private-key: ${{ secrets.ACORN_GHA_PRIVATE_KEY }}
