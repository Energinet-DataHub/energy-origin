name: Build Subsystems

on:
  workflow_call:
    inputs:
      dry-run:
        description: "An indication of whether to commit/publish results"
        required: false
        type: string
      is-dependabot:
        description: "An indication of whether the workflow was triggered by dependabot"
        required: false
        type: string

jobs:
  find_changed_domains:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build_matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Find changed domains
        id: find_diff
        uses: CodeReaper/find-diff-action@v3
        with:
          paths: domains/*/

      - name: Build relevant matrix and generate solution files
        id: build_matrix
        if: ${{ steps.find_diff.outputs.list != '' }}
        shell: bash
        env:
          LIST: ${{ steps.find_diff.outputs.list }}
        run: |
          set -e
          set -o pipefail

          echo "Changed paths:"
          echo "$LIST"

          MATRIX_ENTRIES=()
          ARTIFACT_FILES=()

          while read -r domain_path; do
            [ -d "$domain_path" ] || continue

            # Get the domain name
            DOMAIN=$(basename "$domain_path")
            echo "Processing domain: $DOMAIN"

            # Use domain-specific global.json or fallback to repository root
            if [ -f "$domain_path/global.json" ]; then
              GLOBAL_JSON="$domain_path/global.json"
            else
              GLOBAL_JSON="global.json"
            fi

            # Fetch SDK and runtime versions
            SDK_VERSION=$(jq -r '.sdk.version' "$GLOBAL_JSON")
            RUNTIME_VERSION=$(jq -r '.runtime.version' "$GLOBAL_JSON")

            # Find all main projects (exclude Shared and Tests directories)
            CSPROJ_PATHS=$(find "$domain_path" -mindepth 2 -maxdepth 3 -name "*.csproj" -not -path "*/Shared/*" -not -path "*/*Tests/*")

            while read -r csproj_file; do
              [ -f "$csproj_file" ] || continue

              # Get the project directory
              PROJECT_DIR=$(dirname "$csproj_file")

              # Find configuration.yaml in the project directory or parent directories
              CONFIG_FILE=""
              CURRENT_DIR="$PROJECT_DIR"
              while [ "$CURRENT_DIR" != "$domain_path" ] && [ "$CURRENT_DIR" != "." ]; do
                if [ -f "$CURRENT_DIR/configuration.yaml" ]; then
                  CONFIG_FILE="$CURRENT_DIR/configuration.yaml"
                  break
                fi
                CURRENT_DIR=$(dirname "$CURRENT_DIR")
              done

              if [ -z "$CONFIG_FILE" ]; then
                echo "No configuration.yaml found for $csproj_file, skipping."
                continue
              fi

              # Find migrations file if it exists
              MIGRATION_FILE=""
              if [ -d "$PROJECT_DIR/migrations" ]; then
                MIGRATION_FILES=$(find "$PROJECT_DIR/migrations" -type f -name "*.sql")
                if [ -n "$MIGRATION_FILES" ]; then
                  MIGRATION_FILE=$(echo "$MIGRATION_FILES" | head -n1)
                fi
              fi

              # Generate solution file
              SOLUTION_NAME="${DOMAIN}_$(basename "${csproj_file%.*}").sln"
              SOLUTION_PATH="$PROJECT_DIR/$SOLUTION_NAME"

              # Navigate to the project directory
              pushd "$PROJECT_DIR"

              # Remove existing solution file if it exists
              rm -f "$SOLUTION_NAME" || true

              # Create a new solution file
              dotnet new sln -n "$SOLUTION_NAME"

              # Add the project to the solution
              dotnet sln "$SOLUTION_NAME" add "$csproj_file"

              popd

              # Add solution file to artifact list
              ARTIFACT_FILES+=("$SOLUTION_PATH")

              # Prepare matrix entry
              MATRIX_ENTRY=$(jq -n \
                --arg domain "$DOMAIN" \
                --arg project "$csproj_file" \
                --arg solution "$SOLUTION_PATH" \
                --arg configuration "$CONFIG_FILE" \
                --arg sdk_version "$SDK_VERSION" \
                --arg runtime_version "$RUNTIME_VERSION" \
                --arg migration_file "$MIGRATION_FILE" \
                '{domain: $domain, project: $project, solution: $solution, configuration: $configuration, sdk_version: $sdk_version, runtime_version: $runtime_version, migration_file: $migration_file}')
              MATRIX_ENTRIES+=("$MATRIX_ENTRY")
            done <<< "$CSPROJ_PATHS"

          done <<< "$LIST"

          if [ ${#MATRIX_ENTRIES[@]} -eq 0 ]; then
            echo "No projects found to process."
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Build the JSON matrix
          MATRIX=$(printf '%s\n' "${MATRIX_ENTRIES[@]}" | jq -s '.')
          echo "::group::Matrix"
          echo "$MATRIX" | jq
          echo "::endgroup::"

          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

      - name: Upload solution files
        if: ${{ steps.build_matrix.outputs.matrix != '[]' }}
        uses: actions/upload-artifact@v3
        with:
          name: solution-files
          paths: |
            **/*.sln

  validate_domains:
    needs: find_changed_domains
    if: ${{ needs.find_changed_domains.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.find_changed_domains.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download solution files
        uses: actions/download-artifact@v3
        with:
          name: solution-files

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.project.sdk_version }}

      - name: Validate domain ${{ matrix.project.domain }}
        uses: ./.github/actions/dotnet-validate
        with:
          paths: ${{ matrix.project.solution }}
          dotnet-version: ${{ matrix.project.sdk_version }}
          sql-file: ${{ matrix.project.migration_file }}

  build_domains:
    needs: validate_domains
    if: ${{ needs.find_changed_domains.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.find_changed_domains.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download solution files
        uses: actions/download-artifact@v3
        with:
          name: solution-files

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.project.sdk_version }}

      - name: Build Docker image for ${{ matrix.project.domain }}
        uses: ./.github/actions/dotnet-build
        with:
          solution: ${{ matrix.project.solution }}
          project: ${{ matrix.project.project }}
          configuration: ${{ matrix.project.configuration }}
          migrations: ${{ matrix.project.migration_file }}
          sdk-version: ${{ matrix.project.sdk_version }}
          runtime-version: ${{ matrix.project.runtime_version }}
          dry-run: ${{ github.event.inputs.dry-run || 'false' }}
