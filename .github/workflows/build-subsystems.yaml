name: Build Subsystems

on:
  workflow_call:
    inputs:
      dry-run:
        description: "An indication of whether to commit/publish results"
        required: true
        type: string
      is-dependabot:
        description: "An indication of a dependabot pull request"
        required: true
        type: string

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes
        id: diff
        uses: ./.github/actions/find-diff-action
        with:
          paths: domains/*/

      - name: Create matrix
        if: ${{ steps.diff.outputs.list != '' }}
        id: build_matrix
        shell: bash
        env:
          LIST: ${{ steps.diff.outputs.list }}
        run: |
          declare -A workflows=(
            ["authorization"]=".github/workflows/build-authorization.yaml"
            ["certificates"]=".github/workflows/build-certificates.yaml"
            ["measurements"]=".github/workflows/build-measurements.yaml"
            ["oidc-mock"]=".github/workflows/build-oidc-mock.yaml"
            ["transfer"]=".github/workflows/build-transfer.yaml"
          )

          matrix='[]'

          while read domain; do
            subsystem=$(basename "$domain")
            if [[ -n "${workflows[$subsystem]}" ]]; then
              matrix=$(echo "$matrix" | jq -c --arg subsystem "$subsystem" --arg path "$domain" --arg workflow "${workflows[$subsystem]}" '. += [{"name": $subsystem, "path": $path, "workflow": $workflow}]')
            fi
          done <<< "$LIST"

          if [ -z "$matrix" ] || [ "$matrix" = "[]" ]; then
            echo "No matching subsystems found. Setting an empty matrix."
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":$matrix}" >> $GITHUB_OUTPUT
          fi

      - name: Output Matrix
        shell: bash
        run: |
          echo '::group::Matrix Content'
          echo "${{ steps.build_matrix.outputs.matrix }}" | jq .
          echo '::endgroup::'

  build:
    needs: detect
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Prepare workspace for artifact upload
        run: |
          find domains/ -mindepth 1 -maxdepth 1 -type d ! -name "${{ matrix.name }}" ! -name "libraries" -exec rm -rf {} +

      - name: Upload subsystem and libraries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-files
          path: domains/

      - name: Trigger the corresponding build workflow
        uses: ./.github/actions/workflow-dispatch-action@v1
        with:
          workflow: ${{ matrix.workflow }}
          dry-run: ${{ inputs.dry-run }}
          is-dependabot: ${{ inputs.is-dependabot }}


  update:
    runs-on: ubuntu-latest
    name: Update environment
    needs:
      - build
    concurrency: commits-base-environment
    if: ${{ inputs.is-dependabot == 'false' }}
    steps:
      - uses: actions/checkout@v4

      - name: Update environment
        uses: Energinet-DataHub/acorn-actions/actions/update-base-environment@v1
        with:
          configurations: |
            domains/authorization/Authorization.API/configuration.yaml
            domains/authorization/Proxy/configuration.yaml
            domains/certificates/Query.API/configuration.yaml
            domains/measurements/Measurements.API/configuration.yaml
            domains/oidc-mock/API/configuration.yaml
            domains/transfer/Transfer.API/configuration.yaml
            domains/transfer/ClaimAutomation/configuration.yaml
            domains/transfer/TransferAgreementAutomation/configuration.yaml
          deploy_key: ${{ secrets.DEPLOY_KEY_BASE_ENVIRONMENT }}
          dry_run: ${{ inputs.dry-run }}
