name: Build Subsystems

on:
  workflow_call:
    inputs:
      dry-run:
        description: "An indication of whether to commit/publish results"
        required: true
        type: string
      is-dependabot:
        description: "An indication of a dependabot pull request"
        required: true
        type: string

jobs:
  detect-subsystems:
    name: Detect Subsystems
    runs-on: ubuntu-latest

    outputs:
      subsystems: ${{ steps.build-matrix.outputs.subsystems }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Build subsystems matrix
        id: build-matrix
        shell: bash
        run: |
          set -e
          tmpfile=/tmp/final.json
          echo "[" > "$tmpfile"
          first_entry=true

          find domains/ -mindepth 2 -type f -name 'configuration.yaml' \
            | grep -v '/redoc/' \
            | while read configFile; do

              subsystem="$(echo "$configFile" | cut -d'/' -f2)"
              configDir="$(dirname "$configFile")"

              if [ -f "$configDir/global.json" ]; then
                globalJson="$configDir/global.json"
              elif [ -f "domains/$subsystem/global.json" ]; then
                globalJson="domains/$subsystem/global.json"
              else
                globalJson="global.json"  # fallback if none found locally
              fi

              sdkVersion=$(jq -r '.sdk.version // empty' "$globalJson" 2>/dev/null || echo "")
              runtimeVersion=$(jq -r '.runtime.version // empty' "$globalJson" 2>/dev/null || echo "")

              find "$configDir" -type f -name "*.csproj" | while read csprojFile; do
                # Build a small JSON object
                entry=$(
                  jq -n \
                    --arg proj "$csprojFile" \
                    --arg cfg "$configFile" \
                    --arg sdk "$sdkVersion" \
                    --arg rt  "$runtimeVersion" \
                    --arg sub "$subsystem" \
                    '{
                      projectPath: $proj,
                      configPath:  $cfg,
                      sdkVersion:  $sdk,
                      runtimeVersion: $rt,
                      subsystem:   $sub
                    }'
                )

                if [ "$first_entry" = true ]; then
                  first_entry=false
                else
                  echo "," >> "$tmpfile"
                fi

                echo -n "$entry" >> "$tmpfile"
              done
            done

          echo "]" >> "$tmpfile"

          echo "Final matrix JSON:"
          cat "$tmpfile"

          echo "subsystems=$(cat /tmp/final.json)" >> "$GITHUB_OUTPUT"

  test-subsystems:
    name: Test Subsystems
    needs: detect-subsystems
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-subsystems.outputs.subsystems) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Create dynamic solution
        id: create-sln
        shell: bash
        run: |
          SUBSYSTEM="${{ matrix.subsystem }}"
          SOLUTION_NAME="$(tr '[:lower:]' '[:upper:]' <<< ${SUBSYSTEM:0:1})${SUBSYSTEM:1}"

          rm -f "$SOLUTION_NAME.sln"
          dotnet new sln -n "$SOLUTION_NAME"

          find "domains/$SUBSYSTEM" -type f -name '*.csproj' | while read project; do
            dotnet sln "$SOLUTION_NAME.sln" add "$project"
          done

          echo "SOLUTION_NAME=$SOLUTION_NAME" >> $GITHUB_ENV

      - name: Test
        uses: ./.github/actions/dotnet-test
        with:
          solution: ${{ env.SOLUTION_NAME }}.sln
          sdk-version: ${{ matrix.sdkVersion }}

  build-subsystems:
    name: Build Subsystems
    needs: detect-subsystems
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-subsystems.outputs.subsystems) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Create dynamic solution
        id: create-sln
        shell: bash
        run: |
          SUBSYSTEM="${{ matrix.subsystem }}"
          SOLUTION_NAME="$(tr '[:lower:]' '[:upper:]' <<< ${SUBSYSTEM:0:1})${SUBSYSTEM:1}"

          rm -f "$SOLUTION_NAME.sln"
          dotnet new sln -n "$SOLUTION_NAME"

          find "domains/$SUBSYSTEM" -type f -name '*.csproj' | while read project; do
            dotnet sln "$SOLUTION_NAME.sln" add "$project"
          done

          echo "SOLUTION_NAME=$SOLUTION_NAME" >> $GITHUB_ENV

      - name: Build Docker image
        uses: ./.github/actions/dotnet-build
        with:
          solution: ${{ env.SOLUTION_NAME }}.sln
          project: ${{ matrix.projectPath }}
          configuration: ${{ matrix.configPath }}
          dry-run: ${{ inputs.dry-run }}
          sdk-version: ${{ matrix.sdkVersion }}
          runtime-version: ${{ matrix.runtimeVersion }}

  update:
    runs-on: ubuntu-latest
    name: Update environment
    needs:
      - test-subsystems
      - build-subsystems
    concurrency: commits-base-environment
    if: ${{ inputs.is-dependabot == 'false' }}

    steps:
      - uses: actions/checkout@v4

      - name: Update environment
        uses: Energinet-DataHub/acorn-actions/actions/update-base-environment@v4
        with:
          configurations: |
            domains/admin-portal/AdminPortal.Web/configuration.yaml
            domains/authorization/Authorization.API/configuration.yaml
            domains/authorization/Proxy/configuration.yaml
            domains/certificates/Query.API/configuration.yaml
            domains/measurements/Measurements.API/configuration.yaml
            domains/oidc-mock/API/configuration.yaml
            domains/transfer/Transfer.API/configuration.yaml
            domains/transfer/ClaimAutomation/configuration.yaml
            domains/transfer/TransferAgreementAutomation/configuration.yaml
            domains/redoc/configuration.yaml
          dry_run: ${{ inputs.dry-run }}
          github-app-id: ${{ vars.ACORN_GHA_APP_ID }}
          github-app-private-key: ${{ secrets.ACORN_GHA_PRIVATE_KEY }}
