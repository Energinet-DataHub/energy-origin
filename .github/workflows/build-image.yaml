name: Build & Push Container Image

on:
  workflow_call:
    inputs:
      solution:
        description: 'Path to a .NET solution file (.sln). If provided alongside `project`, enables .NET steps.'
        required: false
        type: string
        default: ''
      project:
        description: 'Path to a .NET project file (.csproj). If provided alongside `solution`, enables .NET steps.'
        required: false
        type: string
        default: ''
      sdk-version:
        description: 'Override .NET SDK version (x.y.zzz). Only used if solution & project provided.'
        required: false
        type: string
        default: ''
      runtime-version:
        description: 'Override .NET runtime version (x.y.z). Only used if solution & project provided.'
        required: false
        type: string
        default: ''
      configuration:
        description: 'Path to configuration.yaml for image name lookup.'
        required: true
        type: string
      context:
        description: 'Docker build context directory. For non-.NET: where Dockerfile resides.'
        required: false
        type: string
        default: '.'
      dry-run:
        description: 'Skip pushing & scanning if true.'
        required: false
        type: string
        default: 'false'
      build-args:
        description: 'Additional docker build-args. Ignored if solution+project provided.'
        required: false
        type: string
        default: ''

jobs:
  build:
    name: "Build ${{ inputs.project }}"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      attestations: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup .NET SDK
        if: ${{ inputs.solution != '' && inputs.project != '' }}
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: ${{ inputs.sdk-version != '' && inputs.sdk-version || '9.0.x' }}

      - name: Override SDK/runtime
        if: ${{ inputs.solution != '' && inputs.project != '' }}
        shell: bash
        run: |
          DIRECTORY=$(dirname '${{ inputs.solution }}')
          test -f "$DIRECTORY/global.json" || exit 0
          echo "DIRECTORY=$DIRECTORY" | tee -a $GITHUB_ENV
          echo "SDK=$(jq -rc '.sdk.version' "$DIRECTORY/global.json")" | tee -a $GITHUB_ENV
          echo "RUNTIME=$(jq -rc '.runtime.version' "$DIRECTORY/global.json")" | tee -a $GITHUB_ENV

      - name: Validate SDK/runtime
        if: ${{ inputs.solution != '' && inputs.project != '' }}
        shell: bash
        run: |
          if [ ! -z "${{ inputs.sdk-version }}" ]; then
            echo "SDK=${{ inputs.sdk-version }}" | tee -a $GITHUB_ENV
          fi
          if [ ! -z "${{ inputs.runtime-version }}" ]; then
            echo "RUNTIME=${{ inputs.runtime-version }}" | tee -a $GITHUB_ENV
          fi

      - name: Fail - if versions are not present
        if: ${{ inputs.solution != '' && inputs.project != '' }}
        shell: bash
        run: |
          set +e
          ! test -z "${{ env.SDK }}"
          ! test -z "${{ env.RUNTIME }}"

      - name: Use simplified Dockerfile
        if: ${{ inputs.solution != '' && inputs.project != '' }}
        shell: bash
        run: |
          cp Dockerfile.simplified Dockerfile
          echo "DOCKERFILE=$GITHUB_WORKSPACE/Dockerfile" >> $GITHUB_ENV

      - name: Use Dockerfile from context path
        if: ${{ inputs.solution == '' || inputs.project == '' }}
        shell: bash
        run: |
          DOCKERFILE=Dockerfile  # relative to the context dir
          if [ ! -f "${{ inputs.context }}/$DOCKERFILE" ]; then
            echo "❌ Dockerfile not found at: ${{ inputs.context }}/$DOCKERFILE"
            ls -l "${{ inputs.context }}"
            exit 1
          fi
          echo "DOCKERFILE=$DOCKERFILE" >> $GITHUB_ENV

      - name: Resolve image name
        shell: bash
        run: echo "name=$(yq '.name' '${{ inputs.configuration }}')" | tee -a $GITHUB_ENV

      - name: Resolve image version
        uses: Energinet-DataHub/.github/.github/actions/docker-image-version@83315db621b8631cc0db734ad6f1499add009b46 # v14.38.4

      - name: Resolve container image tag
        shell: bash
        run: echo "LOWERCASED=$(echo 'ghcr.io/${{ github.repository_owner }}/${{ env.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
          ecr: false

      - name: Build & push image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          build-args: ${{ inputs.solution != '' && inputs.project != '' && format('PROJECT=%s SDK_VERSION=%s RUNTIME_VERSION=%s', inputs.project, env.SDK, env.RUNTIME) || inputs.build-args }}
          context: ${{ inputs.context }}
          file: ${{ env.DOCKERFILE }}
          push: ${{ inputs.dry-run != 'true' }}
          provenance: false
          pull: true
          sbom: false
          tags: ${{ env.LOWERCASED }}:${{ env.version }}

      - name: Scan image
        if: ${{ inputs.dry_run != 'true' && ( (github.event_name == 'pull_request' && github.event.pull_request.draft == false && startsWith(github.event.pull_request.head.ref, 'preview/')) || (github.event_name == 'push' && github.ref_name == 'main') ) }}
        uses: ./.github/actions/docker-scan
        with:
          image-name: ${{ env.name }}
          image-tag: ${{ env.version }}
          image-digest: ${{ steps.build.outputs.digest }}
          upload-sarif: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
