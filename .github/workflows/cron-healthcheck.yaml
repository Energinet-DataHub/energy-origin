name: Health checks

on:
  push:
    branches:
      - add-cron-health-check
  workflow_dispatch: {}
  schedule:
    - cron: "30 5,17 * * *"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      subsystems: ${{ env.subsystems }}
      nugets: ${{ env.nugets }}
      dockers: ${{ env.dockers }}
    steps:
      - uses: actions/checkout@v4

      - name: Build subsystems matrix
        shell: bash
        run: |
          for subsystem in $(find domains/ -mindepth 1 -maxdepth 1 -type d); do
            [ -f "$subsystem/global.json" ] || cp "$subsystem/../../global.json" "$subsystem/global.json"
            settings=$(jq -srec '.[0] | .path=$path' --arg path "$subsystem" "$subsystem/global.json")
            sdk=$(printf '%s' "$settings" | jq -rce '.sdk.version')
            runtime=$(printf '%s' "$settings" | jq -rce '.runtime.version')
            csprojects=$(find "$subsystem" -mindepth 3 -maxdepth 3 -name "*.csproj" -exec dirname {} \; | egrep -v '[^\/]*/[^\/]*/Shared/[^\/]*' | egrep -v 'Tests$')
            projects=$(while read project; do printf '{"path":"%s","configuration":"%s","sdkVersion":"%s","runtimeVersion":"%s"}' "$project" "$(dirname $project)/configuration.yaml" "$sdk" "$runtime"; done <<< $csprojects | jq -sc '.')
            printf '{"projects":%s}\n' "$projects"
          done | jq -sc > /tmp/json
          echo "matrix=$(jq '.[].projects[]' /tmp/json | jq -scr '. | unique')" >> "$GITHUB_ENV"

      - name: Build nugets matrix
        shell: bash
        run: echo "nugets=$(find libraries/dotnet/ -mindepth 1 -maxdepth 1 -type d | jq -nRc '[inputs])" >> "$GITHUB_ENV"

      - name: Build dockers matrix
        shell: bash
        run: echo "dockers=$(find libraries/docker/ -mindepth 1 -maxdepth 1 -type d | jq -nRc '[inputs])" >> "$GITHUB_ENV"

  test-subsystems:
    name: Test subsystems
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.setup.outputs.subsystems) }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ matrix.path }}

      - name: Resolve version
        uses: ./.github/actions/docker-image-version

      - name: Resolve
        shell: bash
        env:
          PROJECT: ${{ matrix.build.path }}
          CONFIGURATION: ${{ matrix.build.configuration }}
        run: |
          projects=$(dirname "$PROJECT")
          domain=$(dirname "$projects")
          name=$(yq '.name' "$CONFIGURATION")
          service=${PROJECT#"$domain"}
          path=$(find "$PROJECT" -name "*.csproj" | head -n1)
          paths=$(for item in $(echo "$projects/"* "$projects"/../Shared); do test -d "$item" && find "$item" -name "*.csproj" || true; done)
          migration="$domain/migrations/$(basename "$PROJECT").sql"
          if [ ! -f "$migration" ]; then
            migration=""
          fi

          EOF=$(head -c 20 /dev/random | md5sum | head -c 32)
          {
            printf "paths<<%s\n" "$EOF"
            printf "%s\n" "$paths"
            printf "%s\n" "$EOF"
            echo "migration=${migration}"
            echo "service=${service}"
            echo "domain=${domain}"
            echo "name=${name}"
            echo "path=${path}"
          } >> $GITHUB_ENV

      - name: Validate project
        if: ${{ (github.event_name == 'push' && github.ref_name == 'main') }} == false
        uses: ./.github/actions/dotnet-validate
        with:
          dotnet-version: ${{ matrix.build.sdkVersion }}
          pin-version: true
          paths: ${{ env.paths }}
          sql-file: ${{ env.migration }}

  test-nugets:
    name: Test nugets
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.setup.outputs.nugets) }}
    steps:
      - uses: actions/checkout@v4

      - name: Resolve values
        shell: bash
        run: |
          solution=$(dirname "${{ matrix.path }}")
          project=$(basename "${{ matrix.path }}")

          [ -f "$solution/global.json" ] || cp "$solution/../../../global.json" "$solution/global.json"
          sdk=$(jq -rce '.sdk.version' "$solution/global.json")

          echo "SOLUTION=$solution" >> $GITHUB_ENV
          echo "PROJECT=$project" >> $GITHUB_ENV
          echo "SDK_VERSION=$sdk" >> $GITHUB_ENV

      - name: Resolve version
        id: resolve-version
        shell: bash
        run: echo "result=$(yq '.version' ${{ env.SOLUTION }}/configuration.yaml)" >> $GITHUB_OUTPUT

      - name: Pin dotnet version
        shell: bash
        run: echo '{"sdk":{"rollForward":"disable","version":"${{ env.SDK_VERSION }}"}}' > "${{ env.SOLUTION }}/global.json"

      - name: Build library
        uses: ./.github/actions/dotnet-publish-nuget-package
        with:
          solution-file-folder: ${{ env.SOLUTION }}
          project-name: ${{ env.PROJECT }}
          package-version: ${{ steps.resolve-version.outputs.result }}
          nuget-api-key: not-a-valid-secret
          dotnet-version: ${{ env.SDK_VERSION }}
          upload: false

  test-dockers:
    name: Test dockers
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.setup.outputs.dockers) }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ matrix.path }}

      - name: Resolve version
        uses: ./.github/actions/docker-image-version

      - name: Prepare variables
        shell: bash
        run: |
          directory="${{ matrix.path }}"
          context="$directory"
          docker="$directory/Dockerfile"
          configuration="$directory/configuration.yaml"
          name=$(yq '.name' "$configuration")

          {
            echo "context=$context"
            echo "docker=$docker"
            echo "name=$name"
          } >> "$GITHUB_ENV"

      - name: Push image
        uses: ./.github/actions/docker-build-and-push
        with:
          dockerfile: ${{ env.docker }}
          image-name: ${{ env.name }}
          image-tag: ${{ env.version }}
          docker-context: ${{ env.context }}
          dry-run: true
