name: Scan Image

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      image-tag:
        required: true
        type: string
      image-digest:
        required: true
        type: string
    secrets:
      token:
        required: true

permissions:
  contents: read
  attestations: write
  security-events: write
  id-token: write

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:

      - name: Verify calling workflow
        if: ${{ !startsWith(github.workflow_ref, format('{0}/.github/workflows/build.yaml@', github.repository)) }}
        shell: bash
        run: |
          echo "This reusable workflow can only be called by build.yaml"
          exit 1

      - uses: actions/checkout@v4

      - name: Generate SBOM with syft
        uses: anchore/sbom-action@9246b90769f852b3a8921f330c59e0b3f439d6e9 # v0.20.1
        with:
          image: "${{ inputs.image-name }}@${{ inputs.image-digest }}"
          format: cyclonedx-json
          output-file: sbom.cyclonedx.json
          upload-artifact: true

      - name: Attest Provenance for docker image using SLSA framework
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-name:  "${{ inputs.image-name }}"
          subject-digest: "${{ inputs.image-digest }}"
          push-to-registry: true
          show-summary: true

      - name: Attest SBOM with cosign
        uses: actions/attest-sbom@bd218ad0dbcb3e146bd073d1d9c6d78e08aa8a0b # v2.4.0
        with:
          subject-name:  "${{ inputs.image-name }}"
          subject-digest: "${{ inputs.image-digest }}"
          sbom-path: sbom.cyclonedx.json
          push-to-registry: true
          show-summary: true

      - name: Scan SBOM with Grype
        uses: anchore/scan-action@be7a22da4f22dde446c4c4c099887ff5b256526c # v6.3.0
        id: scan
        with:
          sbom: sbom.cyclonedx.json
          fail-build: false
          output-format: sarif
          output-file: results.sarif

      - name: Attest scanning results
        if: steps.scan.outcome == 'success'
        uses: actions/attest@ce27ba3b4a9a139d9a20a4a07d69fabb52f1e5bc # v2.4.0
        with:
          subject-name: "${{ inputs.image-name }}"
          subject-digest: "${{ inputs.image-digest }}"
          predicate-type: 'https://in-toto.io/attestation/vulns'
          predicate-path: 'results.sarif'

      - name: Print scanning summary
        shell: bash
        run: |
          if [ -f "results.sarif" ]; then
            TOTAL_VULNS=$(jq '.runs[0].results | length' results.sarif 2>/dev/null || echo "0")
            HIGH_VULNS=$(jq '.runs[0].results[] | select(.level == "error") | .ruleId' results.sarif 2>/dev/null | wc -l)
            MEDIUM_VULNS=$(jq '.runs[0].results[] | select(.level == "warning") | .ruleId' results.sarif 2>/dev/null | wc -l)
            LOW_VULNS=$(jq '.runs[0].results[] | select(.level == "note") | .ruleId' results.sarif 2>/dev/null | wc -l)

            {
              echo "## Vulnerability Scan Summary"
              echo ""
              echo "**Total Vulnerabilities:** $TOTAL_VULNS"
              echo "- 🔴 High: $HIGH_VULNS"
              echo "- 🟠 Medium: $MEDIUM_VULNS"
              echo "- 🟡 Low: $LOW_VULNS"
              echo ""

              if [ "$TOTAL_VULNS" -gt 0 ]; then
                echo "**Vulnerabilities Found:**"
                jq -r '.runs[0].results[] | "\(.level): \(.message.text) (\(.ruleId))"' results.sarif 2>/dev/null | while read line; do
                  echo "- $line"
                done
              else
                echo "✅ No vulnerabilities found!"
              fi
            } >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ SARIF results file not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload sarif report
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        uses: github/codeql-action/upload-sarif@ce28f5bb42b7a9f2c824e633a3f6ee835bab6858 # v3.29.0
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          category: grype
