name: Build domain

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Debug env
        shell: bash
        run: env

      - name: Debug semver
        uses: ./.github/actions/yaml-semver
        id: semver
        with:
          yaml-file: domains/certificates/chart/Chart.yaml
          yaml-path: version

      - name: Debug semver output
        shell: bash
        run: echo "${{ steps.semver.outputs.semver }}"

  define-matrices:
    runs-on: ubuntu-latest
    outputs:
      domains: ${{ steps.define-matrices.outputs.domains }}
      projects: ${{ steps.define-matrices.outputs.projects }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Ensure main branch is known
        shell: bash
        run: |
          git fetch
          git checkout main
          git checkout -

      - name: Find relevant domains
        id: define-matrices
        shell: bash
        env:
          REF: ${{ github.ref }}
        run: |
          pattern=$(find domains -mindepth 1 -maxdepth 1 -type d -exec printf '^%s|' {} \; | sed 's/|$//g')

          #FIXME: validate files in directories?
          # domains/<>/chart/Chart.yaml
          # domains/<>/chart/values.yaml
          # domains/<>/*.sln
          # domains/<>/<>/chart-overrides.yaml
          # domains/<>/.devcontainer/**
          # domains/<>/.vscode/**

          echo 'Search pattern:'
          echo "$pattern"

          echo '::group::Change set'
          if [ "$REF" = "refs/heads/main" ]; then
            git show --stat=10000 main
          else
            git diff --stat=10000 main
          fi
          git diff --stat=10000 main
          echo '::endgroup::'

          set +e
          if [ "$REF" = "refs/heads/main" ]; then
            pattern=$(git show --stat=10000 main | egrep '^ [^ ]' | grep '|' | sed 's/^ *//g' | egrep -o "$pattern" | sort -u | xargs -r printf '^%s|' | sed 's/|$//g')
          else
            pattern=$(git diff --stat=10000 main | grep '|' | sed 's/^ *//g' | egrep -o "$pattern" | sort -u | xargs -r printf '^%s|' | sed 's/|$//g')
          fi
          set -e

          echo 'Relevance pattern:'
          echo "$pattern"

          if [ -z "$pattern" ]; then
            echo 'Relevance pattern is empty, emitting empty matrices.'
            echo '::set-output name=domains::[]'
            echo '::set-output name=projects::[]'
            exit 0
          fi

          matrix=$(find domains -mindepth 1 -maxdepth 1 -type d | egrep "$pattern" | while read domain; do
            domain="$domain"
            projects=$(find "$domain" -mindepth 3 -maxdepth 3 -name "*.csproj" -exec dirname {} \; | egrep -v '/Shared$' | egrep -v 'Tests$' | while read directory; do printf '"%s"' "$directory"; done | jq -sc '.')
            printf '{"domain":"%s","projects":%s}' "$domain" "$projects"
          done | jq -sc '.')

          echo '::group::Matrix'
          echo "$matrix" | jq -r '.'
          echo '::endgroup::'

          domains=$(printf "$matrix" | jq '[.[].domain] | unique')
          echo "::set-output name=domains::${domains}"

          echo '::group::Domains'
          echo "$domains" | jq -r '.'
          echo '::endgroup::'

          projects=$(printf "$matrix" | jq '.[].projects[]' | jq -scr '. | unique')
          echo "::set-output name=projects::${projects}"

          echo '::group::Projects'
          echo "$projects" | jq -r '.'
          echo '::endgroup::'

  build-projects:
    runs-on: ubuntu-latest
    needs: define-matrices
    if: ${{ needs.define-matrices.outputs.projects != '[]' }}
    strategy:
      matrix:
        build: ${{ fromJson(needs.define-matrices.outputs.projects) }}
    steps:
      - uses: actions/checkout@v3

      - name: Resolve paths
        shell: bash
        id: resolve-paths
        run: |
          project='${{ matrix.build }}'
          docker='${{ matrix.build }}/Dockerfile'
          solution=$(dirname '${{ matrix.build }}')
          domain=$(dirname "$solution")

          echo "solution=${solution}" >> $GITHUB_OUTPUT
          echo "project=${project}" >> $GITHUB_OUTPUT
          echo "docker=${docker}" >> $GITHUB_OUTPUT
          echo "domain=${domain}" >> $GITHUB_OUTPUT

      - name: Resolve image version
        id: resolve-image
        uses: ./.github/actions/yaml-semver
        with:
          yaml_file: ${{ steps.resolve-paths.outputs.project }}/chart-overrides.yaml
          yaml_path: version

      # - name: Resolve image name
      #   id: resolve-image
      #   uses: ./.github/actions/get-semver
      #   with:
      #     yaml_file: ${{ steps.resolve-paths.outputs.project }}/chart-overrides.yaml
      #     yaml_path: version

      - name: Validate image
        uses: ./.github/actions/dotnet-validate-domain
        with:
          solution-file-folder: ${{ steps.resolve-paths.outputs.solution }}

      # - name: Build image
      #   uses: ./.github/actions/build-and-push-container
      #   with:
      #     dockerfile: ${{ steps.resolve-paths.outputs.docker }}
      #     image-name: eo-certificates # FIXME
      #     image-tag: ${{ steps.resolve-image.outputs.semver }}
      #     docker-context: ${{ steps.resolve-paths.outputs.domain }}

  build-chart:
    runs-on: ubuntu-latest
    needs:
      - define-matrices
      - build-projects
    if: ${{ needs.define-matrices.outputs.domains != '[]' }}
    strategy:
      matrix:
        build: ${{ fromJson(needs.define-matrices.outputs.domains) }}
    steps:
      - uses: actions/checkout@v3

      - name: Resolve paths
        shell: bash
        id: resolve-paths
        run: |
          domain='${{ matrix.build }}'
          chart='${{ matrix.build }}/chart'
          echo "domain=${domain}" >> $GITHUB_OUTPUT
          echo "chart=${chart}" >> $GITHUB_OUTPUT

      - name: Install yamlpath
        uses: ./.github/actions/yamlpath-install

      - name: Apply chart overrides
        shell: bash
        run: |
          domain='${{ steps.resolve-paths.outputs.domain }}'
          values='${{ steps.resolve-paths.outputs.domain }}/chart/values.yaml'

          find "$domain" -name 'chart-overrides.yaml' | while read override; do
            version=$(yaml-get --query version "$override")
            path=$(yaml-get --query versionPath "$override")
            yaml-set --change "$path" --value "$version" "$values" #FIXME: semver stuff?
          done

      - name: Resolve chart version
        id: resolve-chart
        uses: ./.github/actions/get-semver
        with:
          yaml_file: ${{ steps.resolve-paths.outputs.chart }}/Chart.yaml
          yaml_path: version

      # - name: Release chart
      #   id: release-chart
      #   uses: ./.github/actions/helm-release-chart
      #   with:
      #     chart_folder: ${{ steps.resolve-paths.outputs.chart }}
      #     chart_version: ${{ steps.resolve-chart.outputs.semver }}
      #     include_image_name: true
      #     deploy_key: ${{ secrets.DEPLOY_KEY_HELM_CHARTS }}

  # update-environment:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-chart
  #   if: ${{ needs.define-matrices.outputs.domains != '[]' }} && (github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'preview/'))
  #   strategy:
  #     matrix:
  #       build: ${{ fromJson(needs.define-matrices.outputs.domains) }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Resolve paths
  #       shell: bash
  #       id: resolve-paths
  #       run: |
  #         chart='${{ matrix.build }}/chart'
  #         echo "chart=${chart}" >> $GITHUB_OUTPUT

  #     - name: Resolve chart version
  #       id: resolve-chart
  #       uses: ./.github/actions/get-semver
  #       with:
  #         yaml_file: ${{ steps.resolve-paths.outputs.chart }}/Chart.yaml
  #         yaml_path: version

  #     - name: Get info from Chart.yaml
  #       id: chart-info
  #       uses: ./.github/actions/chart-info
  #       with:
  #         chart-folder: ${{ steps.resolve-paths.outputs.chart }}
  #         chart-version: ${{ steps.resolve-chart.outputs.semver }}
  #         include-image-name: true

  #     - name: Update environment
  #       uses: ./.github/actions/update-base-environment
  #       with:
  #         env_branch: ${{ github.event_name == 'push' && github.ref_name == 'main' && 'main' || github.event.pull_request.head.ref }}
  #         app_name: ${{ steps.chart-info.outputs.chart-name }}
  #         chart_name: ${{ steps.chart-info.outputs.chart-name }}
  #         chart_version: ${{ steps.resolve-chart.outputs.semver }}
  #         deploy_key: ${{ secrets.DEPLOY_KEY_BASE_ENVIRONMENT }}
