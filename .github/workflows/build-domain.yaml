name: Build domain

on:
  workflow_call: {}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ env.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: Validate required domain structure
        shell: bash
        run: |
          function required_folder {
            [ -d "$1" ] || { printf '::error title=Missing folder::%s\n' "$1"; exit 1; }
          }

          function required_file {
            [ -f "$1" ] || { printf '::error title=Missing file::%s\n' "$1"; exit 1; }
          }

          find domains -mindepth 1 -maxdepth 1 -type d | while read domain; do
            required_folder "$domain/.devcontainer"
            required_file "$domain/.devcontainer/Dockerfile"
            required_file "$domain/.devcontainer/devcontainer.json"
            required_file "$domain"/*.sln
          done

      - uses: CodeReaper/find-diff-action@v3
        id: diff
        with:
          paths: domains/*/

      - name: Set default matrix
        shell: bash
        run: |
          echo "matrix=[]" >> "$GITHUB_ENV"

      - name: Build relevant matrix
        if: ${{ steps.diff.outputs.list != '' }}
        shell: bash
        env:
          LIST: ${{ steps.diff.outputs.list }}
        run: |
          matrix=$(while read domain; do
            [ -f "$domain/global.json" ] || cp "$domain/../../global.json" "$domain/global.json"
            settings=$(jq -srec '.[0] | .path=$path' --arg path "$domain" "$domain/global.json")
            sdk=$(printf '%s' "$settings" | jq -rce '.sdk.version')
            csprojects=$(find "$domain" -mindepth 3 -maxdepth 3 -name "*.csproj" -exec dirname {} \; | egrep -v '[^\/]*/[^\/]*/Shared/[^\/]*' | egrep -v 'Tests$')
            projects=$(while read project; do printf '{"path":"%s","configuration":"%s","dotnetVersion":"%s"}' "$project" "$(dirname $project)/configuration.yaml" "$sdk"; done <<< $csprojects | jq -sc '.')
            printf '{"projects":%s}' "$projects"
          done <<< $LIST | jq -sc '.')

          echo '::group::Matrix'
          echo "$matrix" | jq -r '.'
          echo '::endgroup::'

          projects=$(printf "$matrix" | jq '.[].projects[]' | jq -scr '. | unique')
          echo "matrix=$projects" >> "$GITHUB_ENV"

      - name: Matrix
        shell: bash
        run: |
          echo '::group::Raw'
          printf '${{ env.matrix }}\n'
          echo '::endgroup::'
          printf '${{ env.matrix }}' | jq -r '.'

  build-projects:
    name: Build projects
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.matrix != '[]' }}
    strategy:
      matrix:
        build: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Resolve version
        uses: ./.github/actions/yaml-semver
        with:
          yaml-file: ${{ matrix.build.configuration }}
          yaml-path: version

      - name: Resolve
        shell: bash
        id: resolver
        env:
          PROJECT: ${{ matrix.build.path }}
          CONFIGURATION: ${{ matrix.build.configuration }}
        run: |
          docker="$PROJECT/Dockerfile"
          service=$(dirname "$PROJECT")
          domain=$(dirname "$service")
          name=$(yq '.name' "$CONFIGURATION")
          dotnet=${{ matrix.build.dotnetVersion }}

          {
            echo "service=${service}"
            echo "project=${PROJECT}"
            echo "docker=${docker}"
            echo "domain=${domain}"
            echo "name=${name}"
            echo "dotnet=${dotnet::${#dotnet}-2}"
          } >> $GITHUB_OUTPUT

      - name: Pin dotnet version
        shell: bash
        run: echo '{"sdk":{"rollForward":"disable","version":"${{ matrix.build.dotnetVersion }}"}}' > "${{ steps.resolver.outputs.domain }}/global.json"

      - name: Test and lint image
        uses: ./.github/actions/dotnet-validate-domain
        with:
          solution-file-folder: ${{ steps.resolver.outputs.service }}
          dotnet-version: ${{ matrix.build.dotnetVersion }}

      - name: Build image
        uses: ./.github/actions/build-and-push-container
        with:
          dockerfile: ${{ steps.resolver.outputs.docker }}
          image-name: ${{ steps.resolver.outputs.name }}
          image-tag: ${{ env.version }}
          docker-context: ${{ steps.resolver.outputs.domain }}
          dry-run: ${{ !(github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'preview/')) }}
          build-args: |
            SDK_VERSION=${{ matrix.build.dotnetVersion }}
            RUNTIME_VERSION=${{ steps.resolver.outputs.dotnet }}

  update-environment:
    name: Update environment
    runs-on: ubuntu-latest
    needs:
      - setup
      - build-projects
    concurrency: commits-base-environment
    strategy:
      max-parallel: 1
      matrix:
        build: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Update environment
        uses: ./.github/actions/update-base-environment
        with:
          configuration: ${{ matrix.build.configuration }}
          deploy_key: ${{ secrets.DEPLOY_KEY_BASE_ENVIRONMENT }}
          dry_run: ${{ !(github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'preview/')) }}
