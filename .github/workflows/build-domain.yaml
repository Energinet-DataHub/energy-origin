name: Build domain

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  define-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.define-projects.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Ensure main branch is known
        shell: bash
        run: |
          git fetch
          git checkout main
          git checkout -

      - name: Find relevant projects
        id: define-projects
        shell: bash
        env:
          REF: ${{ github.ref }}
        run: |
          pattern=$(find domains -mindepth 1 -maxdepth 1 -type d -exec printf '^%s|' {} \; | sed 's/|$//g')

          echo 'Search pattern:'
          echo "$pattern"

          echo '::group::Change set'
          if [ "$REF" = "refs/heads/main" ]; then
            git show --stat=10000 main
          else
            git diff --stat=10000 main
          fi
          git diff --stat=10000 main
          echo '::endgroup::'

          set +e
          if [ "$REF" = "refs/heads/main" ]; then
            pattern=$(git show --stat=10000 main | egrep '^ [^ ]' | grep '|' | sed 's/^ *//g' | egrep -o "$pattern" | sort -u | xargs -r printf '^%s|' | sed 's/|$//g')
          else
            pattern=$(git diff --stat=10000 main | grep '|' | sed 's/^ *//g' | egrep -o "$pattern" | sort -u | xargs -r printf '^%s|' | sed 's/|$//g')
          fi
          set -e

          echo 'Relevance pattern:'
          echo "$pattern"

          if [ -z "$pattern" ]; then
            echo 'Relevance pattern is empty, emitting empty matrix.'
            echo '::set-output name=matrix::[]'
            exit 0
          fi

          matrix=$(find domains -mindepth 1 -maxdepth 1 -type d | egrep "$pattern" | while read directory; do printf '{"project": "%s"}' "$directory"; done | jq -sc '.')

          echo "::set-output name=matrix::${matrix}"

          echo '::group::Matrix'
          echo "$matrix" | jq -r '.'
          echo '::endgroup::'

  define-domains:
    runs-on: ubuntu-latest
    needs: define-projects
    if: ${{ needs.define-projects.outputs.matrix != '[]' }}
    outputs:
      matrix: ${{ steps.define-parts.outputs.matrix }}
    strategy:
      matrix:
        domain: ${{ fromJson(needs.define-projects.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Define parts
        shell: bash
        id: define-parts
        run: |
          chart='${{ matrix.projects.domain }}/chart'
          projects=$(find '${{ matrix.projects.domain }}' -mindepth 2 -maxdepth 2 -name "*.csproj" -exec dirname {} \; | egrep -v '/Shared$' | while read directory; do printf '"%s"' "$directory"; done | jq -sc '.')

          matrix=$(printf '{"chart":"%s", "projects":%s}' "$chart" "$projects")
          echo "::set-output name=matrix::${matrix}"

          echo '::group::Matrix'
          echo "$matrix" | jq -r '.'
          echo '::endgroup::'

  build-domain:
    runs-on: ubuntu-latest
    needs: define-domains
    if: ${{ needs.define-domains.outputs.matrix != '[]' }}
    strategy:
      matrix:
        domain: ${{ fromJson(needs.define-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

  # resolve-versions:
  #   name: Resolve versions
  #   runs-on: ubuntu-latest
  #   outputs:
  #     chart: ${{ steps.resolve-chart.outputs.semver }}
  #     image: ${{ steps.resolve-image.outputs.semver }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Resolve chart version
  #       id: resolve-chart
  #       uses: ./.github/actions/get-semver
  #       with:
  #         yaml_file: domains/certificates/chart/Chart.yaml
  #         yaml_path: version

  #     - name: Resolve image version
  #       id: resolve-image
  #       uses: ./.github/actions/get-semver
  #       with:
  #         yaml_file: domains/certificates/chart/values.yaml
  #         yaml_path: api.image.tag

  # publish:
  #   name: Publish container
  #   needs: resolve-versions
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Validate image
  #       uses: ./.github/actions/dotnet-validate-domain
  #       with:
  #         solution-file-folder: domains/certificates/Query.API/

  #     - name: Build image
  #       uses: ./.github/actions/build-and-push-container
  #       with:
  #         dockerfile: domains/certificates/Query.API/Dockerfile
  #         image-name: eo-certificates
  #         image-tag: ${{ needs.resolve-versions.outputs.image }}
  #         docker-context: domains/certificates/

  # release-chart:
  #   name: Release chart
  #   needs: [publish, resolve-versions]
  #   runs-on: ubuntu-latest
  #   outputs:
  #     chart-name: ${{ steps.release-chart.outputs.chart_name }}
  #     chart-version: ${{ steps.release-chart.outputs.chart_version }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Update image tag
  #       uses: ./.github/actions/yaml-set
  #       with:
  #         yaml_file: domains/certificates/chart/values.yaml
  #         yaml_path: api.image.tag
  #         value: ${{ needs.resolve-versions.outputs.image }}

  #     - name: Release chart
  #       id: release-chart
  #       uses: ./.github/actions/helm-release-chart
  #       with:
  #         chart_folder: domains/certificates/chart
  #         chart_version: ${{ needs.resolve-versions.outputs.chart }}
  #         include_image_name: true
  #         deploy_key: ${{ secrets.DEPLOY_KEY_HELM_CHARTS }}

  # update-environment:
  #   name: Update preview environment
  #   needs: [resolve-versions, release-chart]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'preview/')
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Update environment
  #       uses: ./.github/actions/update-base-environment
  #       with:
  #         env_branch: ${{ github.event_name == 'push' && github.ref_name == 'main' && 'main' || github.event.pull_request.head.ref }}
  #         app_name: ${{ needs.release-chart.outputs.chart-name }}
  #         chart_name: ${{ needs.release-chart.outputs.chart-name }}
  #         chart_version: ${{ needs.resolve-versions.outputs.chart }}
  #         deploy_key: ${{ secrets.DEPLOY_KEY_BASE_ENVIRONMENT }}
