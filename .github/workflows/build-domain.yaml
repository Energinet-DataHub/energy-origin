name: Build domain

on:
  workflow_call: {}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ env.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: Apply workaround
        uses: mjp41/workaround8649@c8550b715ccdc17f89c8d5c28d7a48eeff9c94a8
        with:
          os: ${{ matrix.os }}

      - name: Validate required domain structure
        shell: bash
        run: |
          function required_folder {
            [ -d "$1" ] || { printf '::error title=Missing folder::%s\n' "$1"; exit 1; }
          }

          function required_file {
            [ -f "$1" ] || { printf '::error title=Missing file::%s\n' "$1"; exit 1; }
          }

          find domains -mindepth 1 -maxdepth 1 -type d | while read domain; do
            required_folder "$domain/.devcontainer"
            required_file "$domain/.devcontainer/Dockerfile"
            required_file "$domain/.devcontainer/devcontainer.json"
            required_file "$domain"/*.sln
          done

      - uses: CodeReaper/find-diff-action@v3
        id: diff
        with:
          paths: domains/*/

      - name: Set default matrix
        shell: bash
        run: |
          echo "matrix=[]" >> "$GITHUB_ENV"

      - name: Build relevant matrix
        if: ${{ steps.diff.outputs.list != '' }}
        shell: bash
        env:
          LIST: ${{ steps.diff.outputs.list }}
        run: |
          while read domain; do
            [ -d "$domain" ] || continue
            [ -f "$domain/global.json" ] || cp "$domain/../../global.json" "$domain/global.json"
            settings=$(jq -srec '.[0] | .path=$path' --arg path "$domain" "$domain/global.json")
            sdk=$(printf '%s' "$settings" | jq -rce '.sdk.version')
            runtime=$(printf '%s' "$settings" | jq -rce '.runtime.version')
            csprojects=$(find "$domain" -mindepth 3 -maxdepth 3 -name "*.csproj" -exec dirname {} \; | egrep -v '[^\/]*/[^\/]*/Shared/[^\/]*' | egrep -v 'Tests$')
            projects=$(while read project; do printf '{"path":"%s","configuration":"%s","sdkVersion":"%s","runtimeVersion":"%s"}' "$project" "$(dirname $project)/configuration.yaml" "$sdk" "$runtime"; done <<< $csprojects | jq -sc '.')
            printf '{"projects":%s}\n' "$projects"
          done <<< $LIST > /tmp/json

          if [ ! -s /tmp/json ]; then
            exit 0
          fi

          matrix=$(jq -sc '.' < /tmp/json)
          echo '::group::Matrix'
          echo "$matrix" | jq -r '.'
          echo '::endgroup::'

          projects=$(printf "$matrix" | jq '.[].projects[]' | jq -scr '. | unique')
          echo "matrix=$projects" >> "$GITHUB_ENV"

      - name: Matrix
        shell: bash
        run: |
          echo '::group::Raw'
          printf '${{ env.matrix }}\n'
          echo '::endgroup::'
          printf '${{ env.matrix }}' | jq -r '.'

  build-projects:
    name: Build projects
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.matrix != '[]' }}
    strategy:
      matrix:
        build: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Resolve version
        uses: ./.github/actions/docker-image-version

      - name: Resolve
        shell: bash
        env:
          PROJECT: ${{ matrix.build.path }}
          CONFIGURATION: ${{ matrix.build.configuration }}
        run: |
          projects=$(dirname "$PROJECT")
          domain=$(dirname "$projects")
          name=$(yq '.name' "$CONFIGURATION")
          service=${PROJECT#"$domain"}
          path=$(find "$PROJECT" -name "*.csproj" | head -n1)
          paths=$(for item in $(echo "$projects/"* "$projects"/../Shared); do test -d "$item" && find "$item" -name "*.csproj" || true; done)
          migration="$domain/migrations/$(basename "$PROJECT").sql"
          if [ ! -f "$migration" ]; then
            migration=""
          fi

          EOF=$(head -c 20 /dev/random | md5sum | head -c 32)
          {
            printf "paths<<%s\n" "$EOF"
            printf "%s\n" "$paths"
            printf "%s\n" "$EOF"
            echo "migration=${migration}"
            echo "service=${service}"
            echo "domain=${domain}"
            echo "name=${name}"
            echo "path=${path}"
          } >> $GITHUB_ENV

      - name: Validate project
        uses: ./.github/actions/dotnet-validate
        with:
          dotnet-version: ${{ matrix.build.sdkVersion }}
          pin-version: true
          paths: ${{ env.paths }}
          sql-file: ${{ env.migration }}

      - name: Ensure files and folders exists
        shell: bash
        run: mkdir "${{ env.domain }}/migrations" || true

      - name: Enforce assembly name
        shell: bash
        run: |
          set +e
          grep -q "<AssemblyName>" "${{ env.path }}"
          if [ $? -eq 0 ]; then
            sed -i "${{ env.path }}" -e "s|<AssemblyName>.*</AssemblyName>|<AssemblyName>main</AssemblyName>|"
          else
            sed -i "${{ env.path }}" -e "s|</PropertyGroup>|<AssemblyName>main</AssemblyName></PropertyGroup>|"
          fi

      - name: Build image
        uses: ./.github/actions/docker-build-and-push
        with:
          dockerfile: Dockerfile
          image-name: ${{ env.name }}
          image-tag: ${{ env.version }}
          docker-context: .
          dry-run: ${{ !(github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'preview/')) }}
          build-args: |
            SUBSYSTEM=${{ env.domain }}
            PROJECT=${{ env.service }}
            SDK_VERSION=${{ matrix.build.sdkVersion }}
            RUNTIME_VERSION=${{ matrix.build.runtimeVersion }}

      - name: Scan image
        uses: ./.github/actions/docker-scan
        with:
          image-name: ${{ env.name }}
          image-tag: ${{ env.version }}
          upload-sarif: ${{ github.event_name == 'push' && github.ref_name == 'main' }}

  update-environment:
    name: Update environment
    runs-on: ubuntu-latest
    needs:
      - setup
      - build-projects
    concurrency: commits-base-environment
    strategy:
      max-parallel: 1
      matrix:
        build: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Update environment
        uses: ./.github/actions/update-base-environment
        with:
          configuration: ${{ matrix.build.configuration }}
          deploy_key: ${{ secrets.DEPLOY_KEY_BASE_ENVIRONMENT }}
          dry_run: ${{ !(github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'preview/')) }}
