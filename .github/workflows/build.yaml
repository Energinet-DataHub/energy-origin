name: Build Unified

on:
  workflow_call:
    inputs:
      dry-run:
        description: "An indication of whether to commit/publish results"
        required: true
        type: string
      is-dependabot:
        description: "An indication of a dependabot pull request"
        required: true
        type: string

permissions: { }

jobs:
  generate-build-matrix:
    permissions: { }
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Find changes in buildable projects
        id: find-changes
        uses: ./.github/actions/find-diff-action
        with:
          paths: |
            domains/*/API/**/*.csproj
            domains/*/API/**/configuration.yaml
            domains/*/Proxy/**/*.csproj
            domains/*/Proxy/**/configuration.yaml
            domains/*/Worker/**/*.csproj
            domains/*/Worker/**/configuration.yaml
            domains/*/Web/**/*.csproj
            domains/*/Web/**/configuration.yaml
            domains/*/Dockerfile
            domains/*/configuration.yaml
            domains/*/*.sln

      - name: Generate build matrix
        id: set-matrix
        shell: bash
        run: |
          CHANGES="${{ steps.find-changes.outputs.list }}"
          [ "${{ steps.find-changes.outputs.matches }}" != "true" ] && echo "matrix=[]" >> $GITHUB_OUTPUT && exit 0
          dotnet_entries=$(find domains -name "*.csproj" -print0 | xargs -0 -I{} sh -c '[[ "{}" =~ /Tests/ || "{}" =~ /Shared/ || "{}" =~ Test\.csproj$ ]] && exit 0; pd=$(dirname "{}"); dn=$(echo "$pd" | sed "s|/.*/.*$||"); pn=$(basename "$pd"); cf=$(test -f "$pd/configuration.yaml" && echo "$pd/configuration.yaml" || test -f "$(dirname "$pd")/configuration.yaml" && echo "$(dirname "$pd")/configuration.yaml" || echo ""); [[ -n "$cf" && "'"$CHANGES"'" =~ "$pd"|"$cf" ]] && echo "{\"project-name\":\"$pn\",\"build-type\":\"dotnet\",\"solution\":\"$(test -f "$dn/$(basename "$dn").sln" && echo "$dn/$(basename "$dn").sln" || test -f "$dn/$(basename "$pd").sln" && echo "$dn/$(basename "$pd").sln" || echo "")\",\"project\":\"{}\",\"configuration\":\"$cf\"}"' | tr '\n' ',' | sed 's/,$//')
          docker_entries=$(find domains -name "Dockerfile" -print0 | xargs -0 -I{} sh -c 'pd=$(dirname "{}"); pn=$(basename "$pd"); cf="$pd/configuration.yaml"; [[ -f "$cf" && "'"$CHANGES"'" =~ "$pd"|"{}" ]] && echo "{\"project-name\":\"$pn\",\"build-type\":\"docker\",\"configuration\":\"$cf\",\"dockerfile\":\"{}\",\"docker-context\":\"$pd\"}"' | tr '\n' ',' | sed 's/,$//')
          matrix_json="[$dotnet_entries$docker_entries]" | sed 's/,\]/]/g'
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build:
    permissions:
      actions: 'read'
      attestations: 'write'
      contents: 'write'
      id-token: 'write'
      packages: 'write'
      security-events: 'write'
    needs: generate-build-matrix
    if: ${{ needs.generate-build-matrix.outputs.matrix != '[]' }}
    name: Build ${{ matrix.project-name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-build-matrix.outputs.matrix) }}
    outputs:
      image-name: ${{ env.LOWERCASED }}
      image-tag: ${{ env.version }}
      image-digest: ${{ steps.build-image.outputs.digest }}
      configuration: ${{ matrix.configuration }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Load global.json for dotnet projects
        if: ${{ matrix.build-type == 'dotnet' }}
        shell: bash
        run: |
          DIRECTORY=$(dirname '${{ matrix.solution }}')
          test -f "$DIRECTORY/global.json" || exit 0
          echo "DIRECTORY=$DIRECTORY" | tee -a $GITHUB_ENV
          echo "SDK=$(jq -rc '.sdk.version' "$DIRECTORY/global.json")" | tee -a $GITHUB_ENV
          echo "RUNTIME=$(jq -rc '.runtime.version' "$DIRECTORY/global.json")" | tee -a $GITHUB_ENV

      - name: Fail if versions are not present for dotnet
        if: ${{ matrix.build-type == 'dotnet' }}
        shell: bash
        run: |
          set +e
          ! test -z "${{ env.SDK }}"
          ! test -z "${{ env.RUNTIME }}"

      - name: Fetch Dockerfile for dotnet projects
        if: ${{ matrix.build-type == 'dotnet' }}
        shell: bash
        run: cp ./Dockerfile.simplified ./Dockerfile

      - name: Resolve image version
        uses: Energinet-DataHub/.github/.github/actions/docker-image-version@ee21233cce88e1b8be9bbf186ae903a377059aef # v14.39.1

      - name: Resolve image name
        shell: bash
        run: echo "name=$(yq '.name' '${{ matrix.configuration }}')" | tee -a $GITHUB_ENV

      - name: Resolve container image name
        shell: bash
        run: echo "LOWERCASED=$(echo 'ghcr.io/${{ github.repository_owner }}/${{ env.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
          ecr: false

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        env:
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ${{ matrix.build-type == 'dotnet' && '.' || matrix.docker-context }}
          file: ${{ matrix.build-type == 'dotnet' && 'Dockerfile' || matrix.dockerfile }}
          push: ${{ inputs.dry-run != 'true' }}
          sbom: false
          provenance: false
          pull: true
          tags: ${{ env.LOWERCASED }}:${{ env.version }}
          build-args: |
            ${{ matrix.build-type == 'dotnet' && format('PROJECT={0} SDK_VERSION={1} RUNTIME_VERSION={2}', matrix.project, env.SDK, env.RUNTIME) || '' }}

  scan:
    permissions:
      attestations: 'write'
      contents: 'read'
      id-token: 'write'
      security-events: 'write'
    needs: build
    if: ${{ inputs.dry-run != 'true' }}
    uses: ./.github/workflows/scan.yaml
    with:
      image-name: ${{ needs.build.outputs.image-name }}
      image-tag: ${{ needs.build.outputs.image-tag }}
      image-digest: ${{ needs.build.outputs.image-digest }}
