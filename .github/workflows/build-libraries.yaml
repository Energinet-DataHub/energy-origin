name: Build library

on:
  workflow_call: {}

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ env.matrix }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: CodeReaper/find-diff-action@v1
        id: diff
        with:
          paths: libraries/dotnet
          type: directories
          minimumDepth: 1
          maximumDepth: 1

      - name: Set default matrix
        shell: bash
        run: |
          echo "matrix=[]" >> "$GITHUB_ENV"

      - name: Build relevant project matrix
        if: ${{ steps.diff.outputs.pattern != '' }}
        shell: bash
        env:
          PATTERN: ${{ steps.diff.outputs.pattern }}
        run: |
          matrix=$(find libraries/dotnet -name "*.csproj" ! -name "*.Tests.csproj" -exec dirname {} \; | egrep "$PATTERN" | while read directory; do printf '{"project": "%s"}' "$directory"; done | jq -sc '.')

          echo "matrix=$matrix" >> "$GITHUB_ENV"

          echo '::group::Matrix'
          echo "$matrix" | jq -r '.'
          echo '::endgroup::'

  build-library:
    runs-on: ubuntu-latest
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.matrix != '[]' }}
    strategy:
      matrix:
        projects: ${{ fromJson(needs.define-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Resolve paths
        shell: bash
        run: |
          solution=$(dirname "${{ matrix.projects.project }}")
          project=$(basename "${{ matrix.projects.project }}")

          printf 'Solution: %s\n' "$solution"
          printf 'Project: %s\n' "$project"

          echo "SOLUTION=$solution" >> $GITHUB_ENV
          echo "PROJECT=$project" >> $GITHUB_ENV

      - name: Resolve version
        id: resolve-version
        shell: bash
        run: echo "result=$(yq '.version' ${{ env.SOLUTION }}/version.yaml)" >> $GITHUB_OUTPUT

      - name: Build library
        uses: ./.github/actions/dotnet-publish-nuget-package
        with:
          solution-file-folder: ${{ env.SOLUTION }}
          project-name: ${{ env.PROJECT }}
          package-version: ${{ steps.resolve-version.outputs.result }}
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
