name: Build library

on:
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.ref }}-library
  cancel-in-progress: false

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.define-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Ensure main branch is known
        shell: bash
        run: |
          git fetch
          git checkout main
          git checkout -

      - name: Find relevant projects
        id: define-matrix
        shell: bash
        run: |
          pattern=$(find libraries/dotnet -type d -mindepth 1 -maxdepth 1 -exec printf '^%s|' {} \; | sed 's/|$//g')

          echo '::group::Search pattern'
          echo "$pattern"
          echo '::endgroup::'

          echo '::group::Change set'
          git diff --stat=10000 main
          echo '::endgroup::'

          set +e
          pattern=$(git diff --stat=10000 main | sed 's/^ *//g' | egrep -o "$pattern" | sort -u | xargs printf '^%s|' | sed 's/|$//g')
          set -e

          echo '::group::Relevance pattern'
          echo "$pattern"
          echo '::endgroup::'

          if [ -z "$pattern" ]; then
            echo 'Relevance pattern is empty, emitting empty matrix.'
            echo '::set-output name=matrix::[]'
            exit 0
          fi

          matrix=$(find libraries/dotnet -name "*.csproj" ! -name "*.Tests.csproj" -exec dirname {} \; | egrep "$pattern" | while read directory; do printf '{"project": "%s"}' "$directory"; done | jq -sc '.')

          echo "::set-output name=matrix::${matrix}"

          echo '::group::Matrix'
          echo "$matrix" | jq -r '.'
          echo '::endgroup::'

  build-library:
    runs-on: ubuntu-latest
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.matrix != '[]' }}
    strategy:
      matrix:
        projects: ${{ fromJson(needs.define-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Resolve paths
        shell: bash
        id: resolve-paths
        run: |
          solution=$(dirname "${{ matrix.projects.project }}")
          project=$(basename "${{ matrix.projects.project }}")

          printf 'Solution: %s\n' "$solution"
          printf 'Project: %s\n' $project"

          echo "::set-output name=solution::${solution}"
          echo "::set-output name=project::${project}"

      - name: Resolve version
        id: resolve-version
        uses: Energinet-Datahub/.github/.github/actions/yaml-get@main
        with:
          yaml_file: ./libraries/dotnet/EnergyOriginDateTimeExtension/version.yaml
          yaml_path: version

      - name: Build library
        uses: ./.github/actions/dotnet-publish-nuget-package
        with:
          solution-file-folder: ${{ steps.resolve-paths.outputs.solution }}
          project-name: ${{ steps.resolve-paths.outputs.project }}
          package-version: ${{ steps.resolve-version.outputs.result }}
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
