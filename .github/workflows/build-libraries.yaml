name: Build library

on:
  workflow_call: {}

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      csprojects: ${{ env.csprojects }}
      dockerfiles: ${{ env.dockerfiles }}

    steps:
      - uses: CodeReaper/find-diff-action@v3
        id: dotnet
        with:
          paths: libraries/dotnet/*/

      - uses: CodeReaper/find-diff-action@v3
        id: docker
        with:
          paths: libraries/docker/*/

      - name: Set default matrices
        shell: bash
        run: |
          echo "csprojects=[]" >> "$GITHUB_ENV"
          echo "dockerfiles=[]" >> "$GITHUB_ENV"

      - uses: actions/checkout@v3

      - name: Build relevant dotnet project matrix
        if: ${{ steps.dotnet.outputs.pattern != '' }}
        shell: bash
        env:
          PATTERN: ${{ steps.dotnet.outputs.pattern }}
        run: |
          csprojects=$(find libraries/dotnet -name "*.csproj" ! -name "*.Tests.csproj" -exec dirname {} \; | egrep "$PATTERN" | while read directory; do printf '{"project": "%s"}' "$directory"; done | jq -sc '.')

          echo "csprojects=$csprojects" >> "$GITHUB_ENV"

          echo '::group::csprojects'
          echo "$csprojects" | jq -r '.'
          echo '::endgroup::'

      - name: Build relevant docker matrix
        if: ${{ steps.docker.outputs.pattern != '' }}
        shell: bash
        env:
          LIST: ${{ steps.docker.outputs.list }}
        run: |
          dockerfiles=$(while read directory; do printf '{"path": "%s"}' "$directory"; done <<< $LIST | jq -sc '.')

          echo "dockerfiles=$dockerfiles" >> "$GITHUB_ENV"

          echo '::group::dockerfiles'
          echo "$dockerfiles" | jq -r '.'
          echo '::endgroup::'

  build-dotnet-library:
    runs-on: ubuntu-latest
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.csprojects != '[]' }}
    strategy:
      matrix:
        projects: ${{ fromJson(needs.define-matrix.outputs.csprojects) }}
    steps:
      - uses: actions/checkout@v3

      - name: Resolve values
        shell: bash
        run: |
          solution=$(dirname "${{ matrix.projects.project }}")
          project=$(basename "${{ matrix.projects.project }}")

          printf 'Solution: %s\n' "$solution"
          printf 'Project: %s\n' "$project"

          [ -f "$solution/global.json" ] || cp "$solution/../../../global.json" "$solution/global.json"
          sdk=$(jq -rce '.sdk.version' "$solution/global.json")

          echo "SOLUTION=$solution" >> $GITHUB_ENV
          echo "PROJECT=$project" >> $GITHUB_ENV
          echo "SDK_VERSION=$sdk" >> $GITHUB_ENV

      - name: Resolve version
        id: resolve-version
        shell: bash
        run: echo "result=$(yq '.version' ${{ env.SOLUTION }}/version.yaml)" >> $GITHUB_OUTPUT

      - name: Pin dotnet version
        shell: bash
        run: echo '{"sdk":{"rollForward":"disable","version":"${{ env.SDK_VERSION }}"}}' > "${{ env.SOLUTION }}/global.json"

      - name: Build library
        uses: ./.github/actions/dotnet-publish-nuget-package
        with:
          solution-file-folder: ${{ env.SOLUTION }}
          project-name: ${{ env.PROJECT }}
          package-version: ${{ steps.resolve-version.outputs.result }}
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          dotnet-version: ${{ env.SDK_VERSION }}

  build-docker-library:
    runs-on: ubuntu-latest
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.dockerfiles != '[]' }}
    strategy:
      matrix:
        item: ${{ fromJson(needs.define-matrix.outputs.dockerfiles) }}
    steps:
      - uses: actions/checkout@v3

      - name: Prepare variables
        shell: bash
        env:
          PR: ${{ github.event.pull_request.number }}
        run: |
          directory="${{ matrix.item.path }}"
          context="$directory"
          docker="$directory/Dockerfile"
          configuration="$directory/configuration.yaml"
          tag=$(yq '.version' "$configuration")
          tag=$(sh ./.github/tooling/semver.sh "$tag" "$PR")

          {
            echo "configuration='$configuration'"
            echo "context='$context'"
            echo "docker='$docker'"
            echo "name='$name'"
            echo "tag='$tag'"
          } >> "$GITHUB_ENV"

      - name: Push image
        uses: ./.github/actions/build-and-push-container
        with:
          dockerfile: ${{ env.docker }}
          image-name: ${{ env.name }}
          image-tag: ${{ env.tag }}
          docker-context: ${{ env.context }}
          dry-run: ${{ needs.define-matrix.outputs.dockerfiles != '[]' && (github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'preview/')) }}

  update-environment-docker:
    name: Update environment
    runs-on: ubuntu-latest
    needs:
      - define-matrix
      - build-docker-library
    concurrency: commits-base-environment
    strategy:
      max-parallel: 1
      matrix:
        item: ${{ fromJson(needs.define-matrix.outputs.dockerfiles) }}
    steps:
      - uses: actions/checkout@v3

      - name: Update environment
        uses: ./.github/actions/update-base-environment
        with:
          configuration: ${{ env.configuration }}
          deploy_key: ${{ secrets.DEPLOY_KEY_BASE_ENVIRONMENT }}
          dry_run: ${{ needs.define-matrix.outputs.dockerfiles != '[]' && (github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'pull_request' && startsWith(github.event.pull_request.head.ref, 'preview/')) }}
